use regex::bytes;
use std::{borrow::Cow, str};

// replace \[...] by unicode characters
pub fn mathematica_to_utf8(
    text: &[u8],
) -> Result<Cow<'_, [u8]>, str::Utf8Error> {
    debug!("replace special mathematica characters by utf8");

    let re = bytes::Regex::new(r"\\\[(\w+)\]").unwrap();
    let result = re.replace_all(text, |caps: &bytes::Captures| {
        if let Some(&res) = TO_UNICODE.get(&caps[1]) {
            res.to_owned()
        } else {
            caps[0].to_owned()
        }
    });
    trace!("{}", str::from_utf8(&result).unwrap());
    Ok(result)
}

// Mathematica unicode characters
// obtained from
// ```Mathematica
// chars = StringCases[ToString@FullForm@FromCharacterCode@Range@65535,
// a : ("\\[" ~~ Shortest[x__] ~~ "]") :> {x, ToExpression["\"" <> a <> "\""]}] // Sort;
// str = OpenWrite[..., CharacterEncoding -> "UTF-8"];
// WriteString[str, foo];
/// ```
const TO_UNICODE: phf::Map<&'static [u8], &'static [u8]> = phf_map! {
    b"AAcute" => "á".as_bytes(),
    b"ABar" => "ā".as_bytes(),
    b"ACup" => "ă".as_bytes(),
    b"ADoubleDot" => "ä".as_bytes(),
    b"AE" => "æ".as_bytes(),
    b"AGrave" => "à".as_bytes(),
    b"AHat" => "â".as_bytes(),
    b"Akuz" => "".as_bytes(),
    b"Aleph" => "ℵ".as_bytes(),
    b"AliasDelimiter" => "".as_bytes(),
    b"AliasIndicator" => "".as_bytes(),
    b"AlignmentMarker" => "".as_bytes(),
    b"Alpha" => "α".as_bytes(),
    b"AltKey" => "".as_bytes(),
    b"And" => "∧".as_bytes(),
    b"Andy" => "".as_bytes(),
    b"Angle" => "∠".as_bytes(),
    b"Angstrom" => "Å".as_bytes(),
    b"AquariusSign" => "♒".as_bytes(),
    b"AriesSign" => "♈".as_bytes(),
    b"ARing" => "å".as_bytes(),
    b"AscendingEllipsis" => "⋰".as_bytes(),
    b"ATilde" => "ã".as_bytes(),
    b"AutoLeftMatch" => "".as_bytes(),
    b"AutoOperand" => "".as_bytes(),
    b"AutoPlaceholder" => "".as_bytes(),
    b"AutoRightMatch" => "".as_bytes(),
    b"AutoSpace" => "".as_bytes(),
    b"Backslash" => "∖".as_bytes(),
    b"BeamedEighthNote" => "♫".as_bytes(),
    b"BeamedSixteenthNote" => "♬".as_bytes(),
    b"Because" => "∵".as_bytes(),
    b"Bet" => "ℶ".as_bytes(),
    b"Beta" => "β".as_bytes(),
    b"BlackBishop" => "♝".as_bytes(),
    b"BlackKing" => "♚".as_bytes(),
    b"BlackKnight" => "♞".as_bytes(),
    b"BlackPawn" => "♟".as_bytes(),
    b"BlackQueen" => "♛".as_bytes(),
    b"BlackRook" => "♜".as_bytes(),
    b"Breve" => "˘".as_bytes(),
    b"Bullet" => "•".as_bytes(),
    b"CAcute" => "ć".as_bytes(),
    b"CancerSign" => "♋".as_bytes(),
    b"Cap" => "⌢".as_bytes(),
    b"CapitalAAcute" => "Á".as_bytes(),
    b"CapitalABar" => "Ā".as_bytes(),
    b"CapitalACup" => "Ă".as_bytes(),
    b"CapitalADoubleDot" => "Ä".as_bytes(),
    b"CapitalAE" => "Æ".as_bytes(),
    b"CapitalAGrave" => "À".as_bytes(),
    b"CapitalAHat" => "Â".as_bytes(),
    b"CapitalAlpha" => "Α".as_bytes(),
    b"CapitalARing" => "Å".as_bytes(),
    b"CapitalATilde" => "Ã".as_bytes(),
    b"CapitalBeta" => "Β".as_bytes(),
    b"CapitalCAcute" => "Ć".as_bytes(),
    b"CapitalCCedilla" => "Ç".as_bytes(),
    b"CapitalCHacek" => "Č".as_bytes(),
    b"CapitalChi" => "Χ".as_bytes(),
    b"CapitalDelta" => "Δ".as_bytes(),
    b"CapitalDHacek" => "Ď".as_bytes(),
    b"CapitalDifferentialD" => "".as_bytes(),
    b"CapitalDigamma" => "Ϝ".as_bytes(),
    b"CapitalEAcute" => "É".as_bytes(),
    b"CapitalEBar" => "Ē".as_bytes(),
    b"CapitalECup" => "Ĕ".as_bytes(),
    b"CapitalEDoubleDot" => "Ë".as_bytes(),
    b"CapitalEGrave" => "È".as_bytes(),
    b"CapitalEHacek" => "Ě".as_bytes(),
    b"CapitalEHat" => "Ê".as_bytes(),
    b"CapitalEpsilon" => "Ε".as_bytes(),
    b"CapitalEta" => "Η".as_bytes(),
    b"CapitalEth" => "Ð".as_bytes(),
    b"CapitalGamma" => "Γ".as_bytes(),
    b"CapitalIAcute" => "Í".as_bytes(),
    b"CapitalICup" => "Ĭ".as_bytes(),
    b"CapitalIDoubleDot" => "Ï".as_bytes(),
    b"CapitalIGrave" => "Ì".as_bytes(),
    b"CapitalIHat" => "Î".as_bytes(),
    b"CapitalIota" => "Ι".as_bytes(),
    b"CapitalKappa" => "Κ".as_bytes(),
    b"CapitalKoppa" => "Ϟ".as_bytes(),
    b"CapitalLambda" => "Λ".as_bytes(),
    b"CapitalLSlash" => "Ł".as_bytes(),
    b"CapitalMu" => "Μ".as_bytes(),
    b"CapitalNHacek" => "Ň".as_bytes(),
    b"CapitalNTilde" => "Ñ".as_bytes(),
    b"CapitalNu" => "Ν".as_bytes(),
    b"CapitalOAcute" => "Ó".as_bytes(),
    b"CapitalODoubleAcute" => "Ő".as_bytes(),
    b"CapitalODoubleDot" => "Ö".as_bytes(),
    b"CapitalOE" => "Œ".as_bytes(),
    b"CapitalOGrave" => "Ò".as_bytes(),
    b"CapitalOHat" => "Ô".as_bytes(),
    b"CapitalOmega" => "Ω".as_bytes(),
    b"CapitalOmicron" => "Ο".as_bytes(),
    b"CapitalOSlash" => "Ø".as_bytes(),
    b"CapitalOTilde" => "Õ".as_bytes(),
    b"CapitalPhi" => "Φ".as_bytes(),
    b"CapitalPi" => "Π".as_bytes(),
    b"CapitalPsi" => "Ψ".as_bytes(),
    b"CapitalRHacek" => "Ř".as_bytes(),
    b"CapitalRho" => "Ρ".as_bytes(),
    b"CapitalSampi" => "Ϡ".as_bytes(),
    b"CapitalSHacek" => "Š".as_bytes(),
    b"CapitalSigma" => "Σ".as_bytes(),
    b"CapitalStigma" => "Ϛ".as_bytes(),
    b"CapitalTau" => "Τ".as_bytes(),
    b"CapitalTHacek" => "Ť".as_bytes(),
    b"CapitalTheta" => "Θ".as_bytes(),
    b"CapitalThorn" => "Þ".as_bytes(),
    b"CapitalUAcute" => "Ú".as_bytes(),
    b"CapitalUDoubleAcute" => "Ű".as_bytes(),
    b"CapitalUDoubleDot" => "Ü".as_bytes(),
    b"CapitalUGrave" => "Ù".as_bytes(),
    b"CapitalUHat" => "Û".as_bytes(),
    b"CapitalUpsilon" => "Υ".as_bytes(),
    b"CapitalURing" => "Ů".as_bytes(),
    b"CapitalXi" => "Ξ".as_bytes(),
    b"CapitalYAcute" => "Ý".as_bytes(),
    b"CapitalZeta" => "Ζ".as_bytes(),
    b"CapitalZHacek" => "Ž".as_bytes(),
    b"CapricornSign" => "♑".as_bytes(),
    b"CCedilla" => "ç".as_bytes(),
    b"Cedilla" => "¸".as_bytes(),
    b"Cent" => "¢".as_bytes(),
    b"CenterDot" => "·".as_bytes(),
    b"CenterEllipsis" => "⋯".as_bytes(),
    b"CHacek" => "č".as_bytes(),
    b"CheckedBox" => "☒".as_bytes(),
    b"Checkmark" => "✓".as_bytes(),
    b"CheckmarkedBox" => "☑".as_bytes(),
    b"Chi" => "χ".as_bytes(),
    b"CircleDot" => "⊙".as_bytes(),
    b"CircleMinus" => "⊖".as_bytes(),
    b"CirclePlus" => "⊕".as_bytes(),
    b"CircleTimes" => "⊗".as_bytes(),
    b"ClockwiseContourIntegral" => "∲".as_bytes(),
    b"CloseCurlyDoubleQuote" => "”".as_bytes(),
    b"CloseCurlyQuote" => "’".as_bytes(),
    b"CloverLeaf" => "⌘".as_bytes(),
    b"ClubSuit" => "♣".as_bytes(),
    b"Colon" => "∶".as_bytes(),
    b"CommandKey" => "".as_bytes(),
    b"Conditioned" => "".as_bytes(),
    b"Congruent" => "≡".as_bytes(),
    b"Conjugate" => "".as_bytes(),
    b"ConjugateTranspose" => "".as_bytes(),
    b"ConstantC" => "".as_bytes(),
    b"Continuation" => "".as_bytes(),
    b"ContinuedFractionK" => "".as_bytes(),
    b"ContourIntegral" => "∮".as_bytes(),
    b"ControlKey" => "".as_bytes(),
    b"Coproduct" => "∐".as_bytes(),
    b"Copyright" => "©".as_bytes(),
    b"CounterClockwiseContourIntegral" => "∳".as_bytes(),
    b"Cross" => "".as_bytes(),
    b"Cup" => "⌣".as_bytes(),
    b"CupCap" => "≍".as_bytes(),
    b"Curl" => "".as_bytes(),
    b"CurlyCapitalUpsilon" => "ϒ".as_bytes(),
    b"CurlyEpsilon" => "ε".as_bytes(),
    b"CurlyKappa" => "ϰ".as_bytes(),
    b"CurlyPhi" => "φ".as_bytes(),
    b"CurlyPi" => "ϖ".as_bytes(),
    b"CurlyRho" => "ϱ".as_bytes(),
    b"CurlyTheta" => "ϑ".as_bytes(),
    b"Currency" => "¤".as_bytes(),
    b"Dagger" => "†".as_bytes(),
    b"Dalet" => "ℸ".as_bytes(),
    b"Dash" => "–".as_bytes(),
    b"Degree" => "°".as_bytes(),
    b"Del" => "∇".as_bytes(),
    b"DeleteKey" => "".as_bytes(),
    b"Delta" => "δ".as_bytes(),
    b"DescendingEllipsis" => "⋱".as_bytes(),
    b"DHacek" => "ď".as_bytes(),
    b"Diameter" => "⌀".as_bytes(),
    b"Diamond" => "⋄".as_bytes(),
    b"DiamondSuit" => "♢".as_bytes(),
    b"DifferenceDelta" => "".as_bytes(),
    b"DifferentialD" => "".as_bytes(),
    b"Digamma" => "ϝ".as_bytes(),
    b"DirectedEdge" => "".as_bytes(),
    b"DiscreteRatio" => "".as_bytes(),
    b"DiscreteShift" => "".as_bytes(),
    b"DiscretionaryHyphen" => "­".as_bytes(),
    b"DiscretionaryLineSeparator" => "".as_bytes(),
    b"DiscretionaryPageBreakAbove" => "".as_bytes(),
    b"DiscretionaryPageBreakBelow" => "".as_bytes(),
    b"DiscretionaryParagraphSeparator" => "".as_bytes(),
    b"Distributed" => "".as_bytes(),
    b"Divergence" => "".as_bytes(),
    b"Divide" => "÷".as_bytes(),
    b"Divides" => "∣".as_bytes(),
    b"DivisionSlash" => "∕".as_bytes(),
    b"DotEqual" => "≐".as_bytes(),
    b"DotlessI" => "ı".as_bytes(),
    b"DotlessJ" => "".as_bytes(),
    b"DottedSquare" => "".as_bytes(),
    b"DoubleContourIntegral" => "∯".as_bytes(),
    b"DoubleDagger" => "‡".as_bytes(),
    b"DoubledGamma" => "".as_bytes(),
    b"DoubleDot" => "¨".as_bytes(),
    b"DoubleDownArrow" => "⇓".as_bytes(),
    b"DoubledPi" => "".as_bytes(),
    b"DoubleLeftArrow" => "⇐".as_bytes(),
    b"DoubleLeftRightArrow" => "⇔".as_bytes(),
    b"DoubleLeftTee" => "⫤".as_bytes(),
    b"DoubleLongLeftArrow" => "⟸".as_bytes(),
    b"DoubleLongLeftRightArrow" => "⟺".as_bytes(),
    b"DoubleLongRightArrow" => "⟹".as_bytes(),
    b"DoublePrime" => "″".as_bytes(),
    b"DoubleRightArrow" => "⇒".as_bytes(),
    b"DoubleRightTee" => "⊨".as_bytes(),
    b"DoubleStruckA" => "".as_bytes(),
    b"DoubleStruckB" => "".as_bytes(),
    b"DoubleStruckC" => "".as_bytes(),
    b"DoubleStruckCapitalA" => "".as_bytes(),
    b"DoubleStruckCapitalB" => "".as_bytes(),
    b"DoubleStruckCapitalC" => "".as_bytes(),
    b"DoubleStruckCapitalD" => "".as_bytes(),
    b"DoubleStruckCapitalE" => "".as_bytes(),
    b"DoubleStruckCapitalF" => "".as_bytes(),
    b"DoubleStruckCapitalG" => "".as_bytes(),
    b"DoubleStruckCapitalH" => "".as_bytes(),
    b"DoubleStruckCapitalI" => "".as_bytes(),
    b"DoubleStruckCapitalJ" => "".as_bytes(),
    b"DoubleStruckCapitalK" => "".as_bytes(),
    b"DoubleStruckCapitalL" => "".as_bytes(),
    b"DoubleStruckCapitalM" => "".as_bytes(),
    b"DoubleStruckCapitalN" => "".as_bytes(),
    b"DoubleStruckCapitalO" => "".as_bytes(),
    b"DoubleStruckCapitalP" => "".as_bytes(),
    b"DoubleStruckCapitalQ" => "".as_bytes(),
    b"DoubleStruckCapitalR" => "".as_bytes(),
    b"DoubleStruckCapitalS" => "".as_bytes(),
    b"DoubleStruckCapitalT" => "".as_bytes(),
    b"DoubleStruckCapitalU" => "".as_bytes(),
    b"DoubleStruckCapitalV" => "".as_bytes(),
    b"DoubleStruckCapitalW" => "".as_bytes(),
    b"DoubleStruckCapitalX" => "".as_bytes(),
    b"DoubleStruckCapitalY" => "".as_bytes(),
    b"DoubleStruckCapitalZ" => "".as_bytes(),
    b"DoubleStruckD" => "".as_bytes(),
    b"DoubleStruckE" => "".as_bytes(),
    b"DoubleStruckEight" => "".as_bytes(),
    b"DoubleStruckF" => "".as_bytes(),
    b"DoubleStruckFive" => "".as_bytes(),
    b"DoubleStruckFour" => "".as_bytes(),
    b"DoubleStruckG" => "".as_bytes(),
    b"DoubleStruckH" => "".as_bytes(),
    b"DoubleStruckI" => "".as_bytes(),
    b"DoubleStruckJ" => "".as_bytes(),
    b"DoubleStruckK" => "".as_bytes(),
    b"DoubleStruckL" => "".as_bytes(),
    b"DoubleStruckM" => "".as_bytes(),
    b"DoubleStruckN" => "".as_bytes(),
    b"DoubleStruckNine" => "".as_bytes(),
    b"DoubleStruckO" => "".as_bytes(),
    b"DoubleStruckOne" => "".as_bytes(),
    b"DoubleStruckP" => "".as_bytes(),
    b"DoubleStruckQ" => "".as_bytes(),
    b"DoubleStruckR" => "".as_bytes(),
    b"DoubleStruckS" => "".as_bytes(),
    b"DoubleStruckSeven" => "".as_bytes(),
    b"DoubleStruckSix" => "".as_bytes(),
    b"DoubleStruckT" => "".as_bytes(),
    b"DoubleStruckThree" => "".as_bytes(),
    b"DoubleStruckTwo" => "".as_bytes(),
    b"DoubleStruckU" => "".as_bytes(),
    b"DoubleStruckV" => "".as_bytes(),
    b"DoubleStruckW" => "".as_bytes(),
    b"DoubleStruckX" => "".as_bytes(),
    b"DoubleStruckY" => "".as_bytes(),
    b"DoubleStruckZ" => "".as_bytes(),
    b"DoubleStruckZero" => "".as_bytes(),
    b"DoubleUpArrow" => "⇑".as_bytes(),
    b"DoubleUpDownArrow" => "⇕".as_bytes(),
    b"DoubleVerticalBar" => "∥".as_bytes(),
    b"DownArrow" => "↓".as_bytes(),
    b"DownArrowBar" => "⤓".as_bytes(),
    b"DownArrowUpArrow" => "⇵".as_bytes(),
    b"DownBreve" => "".as_bytes(),
    b"DownExclamation" => "¡".as_bytes(),
    b"DownLeftRightVector" => "⥐".as_bytes(),
    b"DownLeftTeeVector" => "⥞".as_bytes(),
    b"DownLeftVector" => "↽".as_bytes(),
    b"DownLeftVectorBar" => "⥖".as_bytes(),
    b"DownPointer" => "▾".as_bytes(),
    b"DownQuestion" => "¿".as_bytes(),
    b"DownRightTeeVector" => "⥟".as_bytes(),
    b"DownRightVector" => "⇁".as_bytes(),
    b"DownRightVectorBar" => "⥗".as_bytes(),
    b"DownTee" => "⊤".as_bytes(),
    b"DownTeeArrow" => "↧".as_bytes(),
    b"EAcute" => "é".as_bytes(),
    b"Earth" => "".as_bytes(),
    b"EBar" => "ē".as_bytes(),
    b"ECup" => "ĕ".as_bytes(),
    b"EDoubleDot" => "ë".as_bytes(),
    b"EGrave" => "è".as_bytes(),
    b"EHacek" => "ě".as_bytes(),
    b"EHat" => "ê".as_bytes(),
    b"EighthNote" => "♪".as_bytes(),
    b"Element" => "∈".as_bytes(),
    b"Ellipsis" => "…".as_bytes(),
    b"EmptyCircle" => "○".as_bytes(),
    b"EmptyDiamond" => "◇".as_bytes(),
    b"EmptyDownTriangle" => "▽".as_bytes(),
    b"EmptyRectangle" => "▯".as_bytes(),
    b"EmptySet" => "∅".as_bytes(),
    b"EmptySmallCircle" => "◦".as_bytes(),
    b"EmptySmallSquare" => "◻".as_bytes(),
    b"EmptySquare" => "□".as_bytes(),
    b"EmptyUpTriangle" => "△".as_bytes(),
    b"EmptyVerySmallSquare" => "▫".as_bytes(),
    b"EnterKey" => "".as_bytes(),
    b"EntityEnd" => "".as_bytes(),
    b"EntityStart" => "".as_bytes(),
    b"Epsilon" => "ϵ".as_bytes(),
    b"Equal" => "".as_bytes(),
    b"EqualTilde" => "≂".as_bytes(),
    b"Equilibrium" => "⇌".as_bytes(),
    b"Equivalent" => "⧦".as_bytes(),
    b"ErrorIndicator" => "".as_bytes(),
    b"EscapeKey" => "".as_bytes(),
    b"Eta" => "η".as_bytes(),
    b"Eth" => "ð".as_bytes(),
    b"Euro" => "€".as_bytes(),
    b"Exists" => "∃".as_bytes(),
    b"ExpectationE" => "".as_bytes(),
    b"ExponentialE" => "".as_bytes(),
    b"FiLigature" => "ﬁ".as_bytes(),
    b"FilledCircle" => "●".as_bytes(),
    b"FilledDiamond" => "◆".as_bytes(),
    b"FilledDownTriangle" => "▼".as_bytes(),
    b"FilledLeftTriangle" => "◀".as_bytes(),
    b"FilledRectangle" => "▮".as_bytes(),
    b"FilledRightTriangle" => "▶".as_bytes(),
    b"FilledSmallCircle" => "".as_bytes(),
    b"FilledSmallSquare" => "◼".as_bytes(),
    b"FilledSquare" => "■".as_bytes(),
    b"FilledUpTriangle" => "▲".as_bytes(),
    b"FilledVerySmallSquare" => "▪".as_bytes(),
    b"FinalSigma" => "ς".as_bytes(),
    b"FirstPage" => "".as_bytes(),
    b"FivePointedStar" => "★".as_bytes(),
    b"Flat" => "♭".as_bytes(),
    b"FlLigature" => "ﬂ".as_bytes(),
    b"Florin" => "ƒ".as_bytes(),
    b"ForAll" => "∀".as_bytes(),
    b"FormalA" => "".as_bytes(),
    b"FormalAlpha" => "".as_bytes(),
    b"FormalB" => "".as_bytes(),
    b"FormalBeta" => "".as_bytes(),
    b"FormalC" => "".as_bytes(),
    b"FormalCapitalA" => "".as_bytes(),
    b"FormalCapitalAlpha" => "".as_bytes(),
    b"FormalCapitalB" => "".as_bytes(),
    b"FormalCapitalBeta" => "".as_bytes(),
    b"FormalCapitalC" => "".as_bytes(),
    b"FormalCapitalChi" => "".as_bytes(),
    b"FormalCapitalD" => "".as_bytes(),
    b"FormalCapitalDelta" => "".as_bytes(),
    b"FormalCapitalDigamma" => "".as_bytes(),
    b"FormalCapitalE" => "".as_bytes(),
    b"FormalCapitalEpsilon" => "".as_bytes(),
    b"FormalCapitalEta" => "".as_bytes(),
    b"FormalCapitalF" => "".as_bytes(),
    b"FormalCapitalG" => "".as_bytes(),
    b"FormalCapitalGamma" => "".as_bytes(),
    b"FormalCapitalH" => "".as_bytes(),
    b"FormalCapitalI" => "".as_bytes(),
    b"FormalCapitalIota" => "".as_bytes(),
    b"FormalCapitalJ" => "".as_bytes(),
    b"FormalCapitalK" => "".as_bytes(),
    b"FormalCapitalKappa" => "".as_bytes(),
    b"FormalCapitalKoppa" => "".as_bytes(),
    b"FormalCapitalL" => "".as_bytes(),
    b"FormalCapitalLambda" => "".as_bytes(),
    b"FormalCapitalM" => "".as_bytes(),
    b"FormalCapitalMu" => "".as_bytes(),
    b"FormalCapitalN" => "".as_bytes(),
    b"FormalCapitalNu" => "".as_bytes(),
    b"FormalCapitalO" => "".as_bytes(),
    b"FormalCapitalOmega" => "".as_bytes(),
    b"FormalCapitalOmicron" => "".as_bytes(),
    b"FormalCapitalP" => "".as_bytes(),
    b"FormalCapitalPhi" => "".as_bytes(),
    b"FormalCapitalPi" => "".as_bytes(),
    b"FormalCapitalPsi" => "".as_bytes(),
    b"FormalCapitalQ" => "".as_bytes(),
    b"FormalCapitalR" => "".as_bytes(),
    b"FormalCapitalRho" => "".as_bytes(),
    b"FormalCapitalS" => "".as_bytes(),
    b"FormalCapitalSampi" => "".as_bytes(),
    b"FormalCapitalSigma" => "".as_bytes(),
    b"FormalCapitalStigma" => "".as_bytes(),
    b"FormalCapitalT" => "".as_bytes(),
    b"FormalCapitalTau" => "".as_bytes(),
    b"FormalCapitalTheta" => "".as_bytes(),
    b"FormalCapitalU" => "".as_bytes(),
    b"FormalCapitalUpsilon" => "".as_bytes(),
    b"FormalCapitalV" => "".as_bytes(),
    b"FormalCapitalW" => "".as_bytes(),
    b"FormalCapitalX" => "".as_bytes(),
    b"FormalCapitalXi" => "".as_bytes(),
    b"FormalCapitalY" => "".as_bytes(),
    b"FormalCapitalZ" => "".as_bytes(),
    b"FormalCapitalZeta" => "".as_bytes(),
    b"FormalChi" => "".as_bytes(),
    b"FormalCurlyCapitalUpsilon" => "".as_bytes(),
    b"FormalCurlyEpsilon" => "".as_bytes(),
    b"FormalCurlyKappa" => "".as_bytes(),
    b"FormalCurlyPhi" => "".as_bytes(),
    b"FormalCurlyPi" => "".as_bytes(),
    b"FormalCurlyRho" => "".as_bytes(),
    b"FormalCurlyTheta" => "".as_bytes(),
    b"FormalD" => "".as_bytes(),
    b"FormalDelta" => "".as_bytes(),
    b"FormalDigamma" => "".as_bytes(),
    b"FormalE" => "".as_bytes(),
    b"FormalEpsilon" => "".as_bytes(),
    b"FormalEta" => "".as_bytes(),
    b"FormalF" => "".as_bytes(),
    b"FormalFinalSigma" => "".as_bytes(),
    b"FormalG" => "".as_bytes(),
    b"FormalGamma" => "".as_bytes(),
    b"FormalH" => "".as_bytes(),
    b"FormalI" => "".as_bytes(),
    b"FormalIota" => "".as_bytes(),
    b"FormalJ" => "".as_bytes(),
    b"FormalK" => "".as_bytes(),
    b"FormalKappa" => "".as_bytes(),
    b"FormalKoppa" => "".as_bytes(),
    b"FormalL" => "".as_bytes(),
    b"FormalLambda" => "".as_bytes(),
    b"FormalM" => "".as_bytes(),
    b"FormalMu" => "".as_bytes(),
    b"FormalN" => "".as_bytes(),
    b"FormalNu" => "".as_bytes(),
    b"FormalO" => "".as_bytes(),
    b"FormalOmega" => "".as_bytes(),
    b"FormalOmicron" => "".as_bytes(),
    b"FormalP" => "".as_bytes(),
    b"FormalPhi" => "".as_bytes(),
    b"FormalPi" => "".as_bytes(),
    b"FormalPsi" => "".as_bytes(),
    b"FormalQ" => "".as_bytes(),
    b"FormalR" => "".as_bytes(),
    b"FormalRho" => "".as_bytes(),
    b"FormalS" => "".as_bytes(),
    b"FormalSampi" => "".as_bytes(),
    b"FormalSigma" => "".as_bytes(),
    b"FormalStigma" => "".as_bytes(),
    b"FormalT" => "".as_bytes(),
    b"FormalTau" => "".as_bytes(),
    b"FormalTheta" => "".as_bytes(),
    b"FormalU" => "".as_bytes(),
    b"FormalUpsilon" => "".as_bytes(),
    b"FormalV" => "".as_bytes(),
    b"FormalW" => "".as_bytes(),
    b"FormalX" => "".as_bytes(),
    b"FormalXi" => "".as_bytes(),
    b"FormalY" => "".as_bytes(),
    b"FormalZ" => "".as_bytes(),
    b"FormalZeta" => "".as_bytes(),
    b"FreakedSmiley" => "".as_bytes(),
    b"FreeformPrompt" => "".as_bytes(),
    b"Function" => "".as_bytes(),
    b"Gamma" => "γ".as_bytes(),
    b"GeminiSign" => "♊".as_bytes(),
    b"Gimel" => "ℷ".as_bytes(),
    b"GothicA" => "".as_bytes(),
    b"GothicB" => "".as_bytes(),
    b"GothicC" => "".as_bytes(),
    b"GothicCapitalA" => "".as_bytes(),
    b"GothicCapitalB" => "".as_bytes(),
    b"GothicCapitalC" => "ℭ".as_bytes(),
    b"GothicCapitalD" => "".as_bytes(),
    b"GothicCapitalE" => "".as_bytes(),
    b"GothicCapitalF" => "".as_bytes(),
    b"GothicCapitalG" => "".as_bytes(),
    b"GothicCapitalH" => "ℌ".as_bytes(),
    b"GothicCapitalI" => "ℑ".as_bytes(),
    b"GothicCapitalJ" => "".as_bytes(),
    b"GothicCapitalK" => "".as_bytes(),
    b"GothicCapitalL" => "".as_bytes(),
    b"GothicCapitalM" => "".as_bytes(),
    b"GothicCapitalN" => "".as_bytes(),
    b"GothicCapitalO" => "".as_bytes(),
    b"GothicCapitalP" => "".as_bytes(),
    b"GothicCapitalQ" => "".as_bytes(),
    b"GothicCapitalR" => "ℜ".as_bytes(),
    b"GothicCapitalS" => "".as_bytes(),
    b"GothicCapitalT" => "".as_bytes(),
    b"GothicCapitalU" => "".as_bytes(),
    b"GothicCapitalV" => "".as_bytes(),
    b"GothicCapitalW" => "".as_bytes(),
    b"GothicCapitalX" => "".as_bytes(),
    b"GothicCapitalY" => "".as_bytes(),
    b"GothicCapitalZ" => "ℨ".as_bytes(),
    b"GothicD" => "".as_bytes(),
    b"GothicE" => "".as_bytes(),
    b"GothicEight" => "".as_bytes(),
    b"GothicF" => "".as_bytes(),
    b"GothicFive" => "".as_bytes(),
    b"GothicFour" => "".as_bytes(),
    b"GothicG" => "".as_bytes(),
    b"GothicH" => "".as_bytes(),
    b"GothicI" => "".as_bytes(),
    b"GothicJ" => "".as_bytes(),
    b"GothicK" => "".as_bytes(),
    b"GothicL" => "".as_bytes(),
    b"GothicM" => "".as_bytes(),
    b"GothicN" => "".as_bytes(),
    b"GothicNine" => "".as_bytes(),
    b"GothicO" => "".as_bytes(),
    b"GothicOne" => "".as_bytes(),
    b"GothicP" => "".as_bytes(),
    b"GothicQ" => "".as_bytes(),
    b"GothicR" => "".as_bytes(),
    b"GothicS" => "".as_bytes(),
    b"GothicSeven" => "".as_bytes(),
    b"GothicSix" => "".as_bytes(),
    b"GothicT" => "".as_bytes(),
    b"GothicThree" => "".as_bytes(),
    b"GothicTwo" => "".as_bytes(),
    b"GothicU" => "".as_bytes(),
    b"GothicV" => "".as_bytes(),
    b"GothicW" => "".as_bytes(),
    b"GothicX" => "".as_bytes(),
    b"GothicY" => "".as_bytes(),
    b"GothicZ" => "".as_bytes(),
    b"GothicZero" => "".as_bytes(),
    b"Gradient" => "".as_bytes(),
    b"GrayCircle" => "".as_bytes(),
    b"GraySquare" => "".as_bytes(),
    b"GreaterEqual" => "≥".as_bytes(),
    b"GreaterEqualLess" => "⋛".as_bytes(),
    b"GreaterFullEqual" => "≧".as_bytes(),
    b"GreaterGreater" => "≫".as_bytes(),
    b"GreaterLess" => "≷".as_bytes(),
    b"GreaterSlantEqual" => "⩾".as_bytes(),
    b"GreaterTilde" => "≳".as_bytes(),
    b"Hacek" => "ˇ".as_bytes(),
    b"HappySmiley" => "☺".as_bytes(),
    b"HBar" => "ℏ".as_bytes(),
    b"HeartSuit" => "♡".as_bytes(),
    b"HermitianConjugate" => "".as_bytes(),
    b"HorizontalLine" => "─".as_bytes(),
    b"HumpDownHump" => "≎".as_bytes(),
    b"HumpEqual" => "≏".as_bytes(),
    b"Hyphen" => "‐".as_bytes(),
    b"IAcute" => "í".as_bytes(),
    b"ICup" => "ĭ".as_bytes(),
    b"IDoubleDot" => "ï".as_bytes(),
    b"IGrave" => "ì".as_bytes(),
    b"IHat" => "î".as_bytes(),
    b"ImaginaryI" => "".as_bytes(),
    b"ImaginaryJ" => "".as_bytes(),
    b"ImplicitPlus" => "".as_bytes(),
    b"Implies" => "".as_bytes(),
    b"IndentingNewLine" => "".as_bytes(),
    b"Infinity" => "∞".as_bytes(),
    b"InlinePart" => "".as_bytes(),
    b"Integral" => "∫".as_bytes(),
    b"Intersection" => "⋂".as_bytes(),
    b"InvisibleApplication" => "".as_bytes(),
    b"InvisibleComma" => "".as_bytes(),
    b"InvisiblePostfixScriptBase" => "".as_bytes(),
    b"InvisiblePrefixScriptBase" => "".as_bytes(),
    b"InvisibleSpace" => "".as_bytes(),
    b"InvisibleTimes" => "⁢".as_bytes(),
    b"Iota" => "ι".as_bytes(),
    b"Jupiter" => "♃".as_bytes(),
    b"Kappa" => "κ".as_bytes(),
    b"KernelIcon" => "".as_bytes(),
    b"KeyBar" => "".as_bytes(),
    b"Koppa" => "ϟ".as_bytes(),
    b"Lambda" => "λ".as_bytes(),
    b"Laplacian" => "∆".as_bytes(),
    b"LastPage" => "".as_bytes(),
    b"LeftAngleBracket" => "〈".as_bytes(),
    b"LeftArrow" => "←".as_bytes(),
    b"LeftArrowBar" => "⇤".as_bytes(),
    b"LeftArrowRightArrow" => "⇆".as_bytes(),
    b"LeftAssociation" => "".as_bytes(),
    b"LeftBracketingBar" => "".as_bytes(),
    b"LeftCeiling" => "⌈".as_bytes(),
    b"LeftDoubleBracket" => "〚".as_bytes(),
    b"LeftDoubleBracketingBar" => "".as_bytes(),
    b"LeftDownTeeVector" => "⥡".as_bytes(),
    b"LeftDownVector" => "⇃".as_bytes(),
    b"LeftDownVectorBar" => "⥙".as_bytes(),
    b"LeftFloor" => "⌊".as_bytes(),
    b"LeftGuillemet" => "«".as_bytes(),
    b"LeftModified" => "".as_bytes(),
    b"LeftPointer" => "◂".as_bytes(),
    b"LeftRightArrow" => "↔".as_bytes(),
    b"LeftRightVector" => "⥎".as_bytes(),
    b"LeftSkeleton" => "".as_bytes(),
    b"LeftTee" => "⊣".as_bytes(),
    b"LeftTeeArrow" => "↤".as_bytes(),
    b"LeftTeeVector" => "⥚".as_bytes(),
    b"LeftTriangle" => "⊲".as_bytes(),
    b"LeftTriangleBar" => "⧏".as_bytes(),
    b"LeftTriangleEqual" => "⊴".as_bytes(),
    b"LeftUpDownVector" => "⥑".as_bytes(),
    b"LeftUpTeeVector" => "⥠".as_bytes(),
    b"LeftUpVector" => "↿".as_bytes(),
    b"LeftUpVectorBar" => "⥘".as_bytes(),
    b"LeftVector" => "↼".as_bytes(),
    b"LeftVectorBar" => "⥒".as_bytes(),
    b"LeoSign" => "♌".as_bytes(),
    b"LessEqual" => "≤".as_bytes(),
    b"LessEqualGreater" => "⋚".as_bytes(),
    b"LessFullEqual" => "≦".as_bytes(),
    b"LessGreater" => "≶".as_bytes(),
    b"LessLess" => "≪".as_bytes(),
    b"LessSlantEqual" => "⩽".as_bytes(),
    b"LessTilde" => "≲".as_bytes(),
    b"LetterSpace" => "".as_bytes(),
    b"LibraSign" => "♎".as_bytes(),
    b"LightBulb" => "".as_bytes(),
    b"Limit" => "".as_bytes(),
    b"LineSeparator" => " ".as_bytes(),
    b"LongDash" => "—".as_bytes(),
    b"LongEqual" => "".as_bytes(),
    b"LongLeftArrow" => "⟵".as_bytes(),
    b"LongLeftRightArrow" => "⟷".as_bytes(),
    b"LongRightArrow" => "⟶".as_bytes(),
    b"LowerLeftArrow" => "↙".as_bytes(),
    b"LowerRightArrow" => "↘".as_bytes(),
    b"LSlash" => "ł".as_bytes(),
    b"Mars" => "♂".as_bytes(),
    b"MathematicaIcon" => "".as_bytes(),
    b"MaxLimit" => "".as_bytes(),
    b"MeasuredAngle" => "∡".as_bytes(),
    b"MediumSpace" => " ".as_bytes(),
    b"Mercury" => "☿".as_bytes(),
    b"Mho" => "℧".as_bytes(),
    b"Micro" => "µ".as_bytes(),
    b"MinLimit" => "".as_bytes(),
    b"Minus" => "−".as_bytes(),
    b"MinusPlus" => "∓".as_bytes(),
    b"Mod1Key" => "".as_bytes(),
    b"Mod2Key" => "".as_bytes(),
    b"Moon" => "☾".as_bytes(),
    b"Mu" => "μ".as_bytes(),
    b"Nand" => "⊼".as_bytes(),
    b"Natural" => "♮".as_bytes(),
    b"NegativeMediumSpace" => "".as_bytes(),
    b"NegativeThickSpace" => "".as_bytes(),
    b"NegativeThinSpace" => "".as_bytes(),
    b"NegativeVeryThinSpace" => "".as_bytes(),
    b"Neptune" => "♆".as_bytes(),
    b"NestedGreaterGreater" => "⪢".as_bytes(),
    b"NestedLessLess" => "⪡".as_bytes(),
    b"NeutralSmiley" => "".as_bytes(),
    b"NHacek" => "ň".as_bytes(),
    b"NoBreak" => "⁠".as_bytes(),
    b"NonBreakingSpace" => " ".as_bytes(),
    b"Nor" => "⊽".as_bytes(),
    b"Not" => "¬".as_bytes(),
    b"NotCongruent" => "≢".as_bytes(),
    b"NotCupCap" => "≭".as_bytes(),
    b"NotDoubleVerticalBar" => "∦".as_bytes(),
    b"NotElement" => "∉".as_bytes(),
    b"NotEqual" => "≠".as_bytes(),
    b"NotEqualTilde" => "".as_bytes(),
    b"NotExists" => "∄".as_bytes(),
    b"NotGreater" => "≯".as_bytes(),
    b"NotGreaterEqual" => "≱".as_bytes(),
    b"NotGreaterFullEqual" => "≩".as_bytes(),
    b"NotGreaterGreater" => "".as_bytes(),
    b"NotGreaterLess" => "≹".as_bytes(),
    b"NotGreaterSlantEqual" => "".as_bytes(),
    b"NotGreaterTilde" => "≵".as_bytes(),
    b"NotHumpDownHump" => "".as_bytes(),
    b"NotHumpEqual" => "".as_bytes(),
    b"NotLeftTriangle" => "⋪".as_bytes(),
    b"NotLeftTriangleBar" => "".as_bytes(),
    b"NotLeftTriangleEqual" => "⋬".as_bytes(),
    b"NotLess" => "≮".as_bytes(),
    b"NotLessEqual" => "≰".as_bytes(),
    b"NotLessFullEqual" => "≨".as_bytes(),
    b"NotLessGreater" => "≸".as_bytes(),
    b"NotLessLess" => "".as_bytes(),
    b"NotLessSlantEqual" => "".as_bytes(),
    b"NotLessTilde" => "≴".as_bytes(),
    b"NotNestedGreaterGreater" => "".as_bytes(),
    b"NotNestedLessLess" => "".as_bytes(),
    b"NotPrecedes" => "⊀".as_bytes(),
    b"NotPrecedesEqual" => "".as_bytes(),
    b"NotPrecedesSlantEqual" => "⋠".as_bytes(),
    b"NotPrecedesTilde" => "⋨".as_bytes(),
    b"NotReverseElement" => "∌".as_bytes(),
    b"NotRightTriangle" => "⋫".as_bytes(),
    b"NotRightTriangleBar" => "".as_bytes(),
    b"NotRightTriangleEqual" => "⋭".as_bytes(),
    b"NotSquareSubset" => "".as_bytes(),
    b"NotSquareSubsetEqual" => "⋢".as_bytes(),
    b"NotSquareSuperset" => "".as_bytes(),
    b"NotSquareSupersetEqual" => "⋣".as_bytes(),
    b"NotSubset" => "⊄".as_bytes(),
    b"NotSubsetEqual" => "⊈".as_bytes(),
    b"NotSucceeds" => "⊁".as_bytes(),
    b"NotSucceedsEqual" => "".as_bytes(),
    b"NotSucceedsSlantEqual" => "⋡".as_bytes(),
    b"NotSucceedsTilde" => "⋩".as_bytes(),
    b"NotSuperset" => "⊅".as_bytes(),
    b"NotSupersetEqual" => "⊉".as_bytes(),
    b"NotTilde" => "≁".as_bytes(),
    b"NotTildeEqual" => "≄".as_bytes(),
    b"NotTildeFullEqual" => "≇".as_bytes(),
    b"NotTildeTilde" => "≉".as_bytes(),
    b"NotVerticalBar" => "".as_bytes(),
    b"NTilde" => "ñ".as_bytes(),
    b"Nu" => "ν".as_bytes(),
    b"Null" => "".as_bytes(),
    b"NumberSign" => "".as_bytes(),
    b"OAcute" => "ó".as_bytes(),
    b"ODoubleAcute" => "ő".as_bytes(),
    b"ODoubleDot" => "ö".as_bytes(),
    b"OE" => "œ".as_bytes(),
    b"OGrave" => "ò".as_bytes(),
    b"OHat" => "ô".as_bytes(),
    b"Omega" => "ω".as_bytes(),
    b"Omicron" => "ο".as_bytes(),
    b"OpenCurlyDoubleQuote" => "“".as_bytes(),
    b"OpenCurlyQuote" => "‘".as_bytes(),
    b"OptionKey" => "".as_bytes(),
    b"Or" => "∨".as_bytes(),
    b"OSlash" => "ø".as_bytes(),
    b"OTilde" => "õ".as_bytes(),
    b"OverBrace" => "︷".as_bytes(),
    b"OverBracket" => "⎴".as_bytes(),
    b"OverParenthesis" => "︵".as_bytes(),
    b"PageBreakAbove" => "".as_bytes(),
    b"PageBreakBelow" => "".as_bytes(),
    b"Paragraph" => "¶".as_bytes(),
    b"ParagraphSeparator" => " ".as_bytes(),
    b"PartialD" => "∂".as_bytes(),
    b"PermutationProduct" => "".as_bytes(),
    b"Perpendicular" => "⟂".as_bytes(),
    b"Phi" => "ϕ".as_bytes(),
    b"Pi" => "π".as_bytes(),
    b"Piecewise" => "".as_bytes(),
    b"PiscesSign" => "♓".as_bytes(),
    b"Placeholder" => "".as_bytes(),
    b"PlusMinus" => "±".as_bytes(),
    b"Pluto" => "♇".as_bytes(),
    b"Precedes" => "≺".as_bytes(),
    b"PrecedesEqual" => "⪯".as_bytes(),
    b"PrecedesSlantEqual" => "≼".as_bytes(),
    b"PrecedesTilde" => "≾".as_bytes(),
    b"Prime" => "′".as_bytes(),
    b"ProbabilityPr" => "".as_bytes(),
    b"Product" => "∏".as_bytes(),
    b"Proportion" => "∷".as_bytes(),
    b"Proportional" => "∝".as_bytes(),
    b"Psi" => "ψ".as_bytes(),
    b"QuarterNote" => "♩".as_bytes(),
    b"RawEscape" => "".as_bytes(),
    b"RawTab" => "	".as_bytes(),
    b"RegisteredTrademark" => "®".as_bytes(),
    b"ReturnIndicator" => "↵".as_bytes(),
    b"ReturnKey" => "".as_bytes(),
    b"ReverseDoublePrime" => "‶".as_bytes(),
    b"ReverseElement" => "∋".as_bytes(),
    b"ReverseEquilibrium" => "⇋".as_bytes(),
    b"ReversePrime" => "‵".as_bytes(),
    b"ReverseUpEquilibrium" => "⥯".as_bytes(),
    b"RHacek" => "ř".as_bytes(),
    b"Rho" => "ρ".as_bytes(),
    b"RightAngle" => "∟".as_bytes(),
    b"RightAngleBracket" => "〉".as_bytes(),
    b"RightArrow" => "→".as_bytes(),
    b"RightArrowBar" => "⇥".as_bytes(),
    b"RightArrowLeftArrow" => "⇄".as_bytes(),
    b"RightAssociation" => "".as_bytes(),
    b"RightBracketingBar" => "".as_bytes(),
    b"RightCeiling" => "⌉".as_bytes(),
    b"RightDoubleBracket" => "〛".as_bytes(),
    b"RightDoubleBracketingBar" => "".as_bytes(),
    b"RightDownTeeVector" => "⥝".as_bytes(),
    b"RightDownVector" => "⇂".as_bytes(),
    b"RightDownVectorBar" => "⥕".as_bytes(),
    b"RightFloor" => "⌋".as_bytes(),
    b"RightGuillemet" => "»".as_bytes(),
    b"RightModified" => "".as_bytes(),
    b"RightPointer" => "▸".as_bytes(),
    b"RightSkeleton" => "".as_bytes(),
    b"RightTee" => "⊢".as_bytes(),
    b"RightTeeArrow" => "↦".as_bytes(),
    b"RightTeeVector" => "⥛".as_bytes(),
    b"RightTriangle" => "⊳".as_bytes(),
    b"RightTriangleBar" => "⧐".as_bytes(),
    b"RightTriangleEqual" => "⊵".as_bytes(),
    b"RightUpDownVector" => "⥏".as_bytes(),
    b"RightUpTeeVector" => "⥜".as_bytes(),
    b"RightUpVector" => "↾".as_bytes(),
    b"RightUpVectorBar" => "⥔".as_bytes(),
    b"RightVector" => "⇀".as_bytes(),
    b"RightVectorBar" => "⥓".as_bytes(),
    b"RoundImplies" => "⥰".as_bytes(),
    b"RoundSpaceIndicator" => "".as_bytes(),
    b"Rule" => "".as_bytes(),
    b"RuleDelayed" => "".as_bytes(),
    b"Rupee" => "₹".as_bytes(),
    b"SadSmiley" => "☹".as_bytes(),
    b"SagittariusSign" => "♐".as_bytes(),
    b"Sampi" => "ϡ".as_bytes(),
    b"Saturn" => "♄".as_bytes(),
    b"ScorpioSign" => "♏".as_bytes(),
    b"ScriptA" => "".as_bytes(),
    b"ScriptB" => "".as_bytes(),
    b"ScriptC" => "".as_bytes(),
    b"ScriptCapitalA" => "".as_bytes(),
    b"ScriptCapitalB" => "ℬ".as_bytes(),
    b"ScriptCapitalC" => "".as_bytes(),
    b"ScriptCapitalD" => "".as_bytes(),
    b"ScriptCapitalE" => "ℰ".as_bytes(),
    b"ScriptCapitalF" => "ℱ".as_bytes(),
    b"ScriptCapitalG" => "".as_bytes(),
    b"ScriptCapitalH" => "ℋ".as_bytes(),
    b"ScriptCapitalI" => "ℐ".as_bytes(),
    b"ScriptCapitalJ" => "".as_bytes(),
    b"ScriptCapitalK" => "".as_bytes(),
    b"ScriptCapitalL" => "ℒ".as_bytes(),
    b"ScriptCapitalM" => "ℳ".as_bytes(),
    b"ScriptCapitalN" => "".as_bytes(),
    b"ScriptCapitalO" => "".as_bytes(),
    b"ScriptCapitalP" => "".as_bytes(),
    b"ScriptCapitalQ" => "".as_bytes(),
    b"ScriptCapitalR" => "ℛ".as_bytes(),
    b"ScriptCapitalS" => "".as_bytes(),
    b"ScriptCapitalT" => "".as_bytes(),
    b"ScriptCapitalU" => "".as_bytes(),
    b"ScriptCapitalV" => "".as_bytes(),
    b"ScriptCapitalW" => "".as_bytes(),
    b"ScriptCapitalX" => "".as_bytes(),
    b"ScriptCapitalY" => "".as_bytes(),
    b"ScriptCapitalZ" => "".as_bytes(),
    b"ScriptD" => "".as_bytes(),
    b"ScriptDotlessI" => "".as_bytes(),
    b"ScriptDotlessJ" => "".as_bytes(),
    b"ScriptE" => "ℯ".as_bytes(),
    b"ScriptEight" => "".as_bytes(),
    b"ScriptF" => "".as_bytes(),
    b"ScriptFive" => "".as_bytes(),
    b"ScriptFour" => "".as_bytes(),
    b"ScriptG" => "ℊ".as_bytes(),
    b"ScriptH" => "".as_bytes(),
    b"ScriptI" => "".as_bytes(),
    b"ScriptJ" => "".as_bytes(),
    b"ScriptK" => "".as_bytes(),
    b"ScriptL" => "ℓ".as_bytes(),
    b"ScriptM" => "".as_bytes(),
    b"ScriptN" => "".as_bytes(),
    b"ScriptNine" => "".as_bytes(),
    b"ScriptO" => "ℴ".as_bytes(),
    b"ScriptOne" => "".as_bytes(),
    b"ScriptP" => "".as_bytes(),
    b"ScriptQ" => "".as_bytes(),
    b"ScriptR" => "".as_bytes(),
    b"ScriptS" => "".as_bytes(),
    b"ScriptSeven" => "".as_bytes(),
    b"ScriptSix" => "".as_bytes(),
    b"ScriptT" => "".as_bytes(),
    b"ScriptThree" => "".as_bytes(),
    b"ScriptTwo" => "".as_bytes(),
    b"ScriptU" => "".as_bytes(),
    b"ScriptV" => "".as_bytes(),
    b"ScriptW" => "".as_bytes(),
    b"ScriptX" => "".as_bytes(),
    b"ScriptY" => "".as_bytes(),
    b"ScriptZ" => "".as_bytes(),
    b"ScriptZero" => "".as_bytes(),
    b"Section" => "§".as_bytes(),
    b"SelectionPlaceholder" => "".as_bytes(),
    b"SHacek" => "š".as_bytes(),
    b"Shah" => "".as_bytes(),
    b"Sharp" => "♯".as_bytes(),
    b"ShiftKey" => "".as_bytes(),
    b"ShortDownArrow" => "".as_bytes(),
    b"ShortLeftArrow" => "".as_bytes(),
    b"ShortRightArrow" => "".as_bytes(),
    b"ShortUpArrow" => "".as_bytes(),
    b"Sigma" => "σ".as_bytes(),
    b"SixPointedStar" => "✶".as_bytes(),
    b"SkeletonIndicator" => "⁃".as_bytes(),
    b"SmallCircle" => "∘".as_bytes(),
    b"SpaceIndicator" => "␣".as_bytes(),
    b"SpaceKey" => "".as_bytes(),
    b"SpadeSuit" => "♠".as_bytes(),
    b"SpanFromAbove" => "".as_bytes(),
    b"SpanFromBoth" => "".as_bytes(),
    b"SpanFromLeft" => "".as_bytes(),
    b"SphericalAngle" => "∢".as_bytes(),
    b"Spooky" => "".as_bytes(),
    b"Sqrt" => "√".as_bytes(),
    b"Square" => "".as_bytes(),
    b"SquareIntersection" => "⊓".as_bytes(),
    b"SquareSubset" => "⊏".as_bytes(),
    b"SquareSubsetEqual" => "⊑".as_bytes(),
    b"SquareSuperset" => "⊐".as_bytes(),
    b"SquareSupersetEqual" => "⊒".as_bytes(),
    b"SquareUnion" => "⊔".as_bytes(),
    b"Star" => "⋆".as_bytes(),
    b"StepperDown" => "".as_bytes(),
    b"StepperLeft" => "".as_bytes(),
    b"StepperRight" => "".as_bytes(),
    b"StepperUp" => "".as_bytes(),
    b"Sterling" => "£".as_bytes(),
    b"Stigma" => "ϛ".as_bytes(),
    b"Subset" => "⊂".as_bytes(),
    b"SubsetEqual" => "⊆".as_bytes(),
    b"Succeeds" => "≻".as_bytes(),
    b"SucceedsEqual" => "⪰".as_bytes(),
    b"SucceedsSlantEqual" => "≽".as_bytes(),
    b"SucceedsTilde" => "≿".as_bytes(),
    b"SuchThat" => "∍".as_bytes(),
    b"Sum" => "∑".as_bytes(),
    b"Sun" => "☉".as_bytes(),
    b"Superset" => "⊃".as_bytes(),
    b"SupersetEqual" => "⊇".as_bytes(),
    b"SystemEnterKey" => "".as_bytes(),
    b"SystemsModelDelay" => "".as_bytes(),
    b"SZ" => "ß".as_bytes(),
    b"TabKey" => "".as_bytes(),
    b"Tau" => "τ".as_bytes(),
    b"TaurusSign" => "♉".as_bytes(),
    b"TensorProduct" => "".as_bytes(),
    b"TensorWedge" => "".as_bytes(),
    b"THacek" => "ť".as_bytes(),
    b"Therefore" => "∴".as_bytes(),
    b"Theta" => "θ".as_bytes(),
    b"ThickSpace" => " ".as_bytes(),
    b"ThinSpace" => " ".as_bytes(),
    b"Thorn" => "þ".as_bytes(),
    b"Tilde" => "∼".as_bytes(),
    b"TildeEqual" => "≃".as_bytes(),
    b"TildeFullEqual" => "≅".as_bytes(),
    b"TildeTilde" => "≈".as_bytes(),
    b"Times" => "×".as_bytes(),
    b"Trademark" => "™".as_bytes(),
    b"Transpose" => "".as_bytes(),
    b"TripleDot" => "".as_bytes(),
    b"TwoWayRule" => "".as_bytes(),
    b"UAcute" => "ú".as_bytes(),
    b"UDoubleAcute" => "ű".as_bytes(),
    b"UDoubleDot" => "ü".as_bytes(),
    b"UGrave" => "ù".as_bytes(),
    b"UHat" => "û".as_bytes(),
    b"UnderBrace" => "︸".as_bytes(),
    b"UnderBracket" => "⎵".as_bytes(),
    b"UnderParenthesis" => "︶".as_bytes(),
    b"UndirectedEdge" => "".as_bytes(),
    b"Union" => "⋃".as_bytes(),
    b"UnionPlus" => "⊎".as_bytes(),
    b"UnknownGlyph" => "�".as_bytes(),
    b"UpArrow" => "↑".as_bytes(),
    b"UpArrowBar" => "⤒".as_bytes(),
    b"UpArrowDownArrow" => "⇅".as_bytes(),
    b"UpDownArrow" => "↕".as_bytes(),
    b"UpEquilibrium" => "⥮".as_bytes(),
    b"UpperLeftArrow" => "↖".as_bytes(),
    b"UpperRightArrow" => "↗".as_bytes(),
    b"UpPointer" => "▴".as_bytes(),
    b"Upsilon" => "υ".as_bytes(),
    b"UpTee" => "⊥".as_bytes(),
    b"UpTeeArrow" => "↥".as_bytes(),
    b"Uranus" => "⛢".as_bytes(),
    b"URing" => "ů".as_bytes(),
    b"VectorGreater" => "".as_bytes(),
    b"VectorGreaterEqual" => "".as_bytes(),
    b"VectorLess" => "".as_bytes(),
    b"VectorLessEqual" => "".as_bytes(),
    b"Vee" => "⋁".as_bytes(),
    b"Venus" => "♀".as_bytes(),
    b"VerticalBar" => "".as_bytes(),
    b"VerticalEllipsis" => "⋮".as_bytes(),
    b"VerticalLine" => "│".as_bytes(),
    b"VerticalSeparator" => "".as_bytes(),
    b"VerticalTilde" => "≀".as_bytes(),
    b"VeryThinSpace" => " ".as_bytes(),
    b"Villa" => "".as_bytes(),
    b"VirgoSign" => "♍".as_bytes(),
    b"WarningSign" => "".as_bytes(),
    b"WatchIcon" => "⌚".as_bytes(),
    b"Wedge" => "⋀".as_bytes(),
    b"WeierstrassP" => "℘".as_bytes(),
    b"WhiteBishop" => "♗".as_bytes(),
    b"WhiteKing" => "♔".as_bytes(),
    b"WhiteKnight" => "♘".as_bytes(),
    b"WhitePawn" => "♙".as_bytes(),
    b"WhiteQueen" => "♕".as_bytes(),
    b"WhiteRook" => "♖".as_bytes(),
    b"Wolf" => "".as_bytes(),
    b"WolframAlphaPrompt" => "".as_bytes(),
    b"WolframLanguageLogo" => "".as_bytes(),
    b"WolframLanguageLogoCircle" => "".as_bytes(),
    b"Xi" => "ξ".as_bytes(),
    b"Xnor" => "".as_bytes(),
    b"Xor" => "⊻".as_bytes(),
    b"YAcute" => "ý".as_bytes(),
    b"YDoubleDot" => "ÿ".as_bytes(),
    b"Yen" => "¥".as_bytes(),
    b"Zeta" => "ζ".as_bytes(),
    b"ZHacek" => "ž".as_bytes(),
};
