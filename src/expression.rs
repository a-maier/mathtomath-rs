use std::convert::From;

type Args<'a> = Box<(Expression<'a>, Expression<'a>)>;

#[derive(Clone,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub enum Expression<'a> {
    Empty,
    Integer(&'a [u8]),
    Real(&'a [u8]),
    Symbol(&'a [u8]),
    String(&'a [u8]),
    Wildcard(Box<Expression<'a>>),
    ManyWildcard(Box<Expression<'a>>),
    Many0Wildcard(Box<Expression<'a>>),
    UPlus(Box<Expression<'a>>),
    UMinus(Box<Expression<'a>>),
    Plus(Args<'a>),
    Minus(Args<'a>),
    Times(Args<'a>),
    Divide(Args<'a>),
    Compound(Args<'a>),
    Coefficient(Args<'a>),
    Sequence(Args<'a>),
    Equals(Args<'a>),
    Dot(Args<'a>),
    Power(Args<'a>),
    Ellipsis,
    Function(Args<'a>),
    Part(Args<'a>),
    E,
    I,
    Pi,
    Infinity,
    Angle(Box<Expression<'a>>),
    Association(Box<Expression<'a>>),
    Ceiling(Box<Expression<'a>>),
    Floor(Box<Expression<'a>>),
    List(Box<Expression<'a>>),
    PrefixIncrement(Box<Expression<'a>>),
    PrefixDecrement(Box<Expression<'a>>),
    Del(Box<Expression<'a>>),
    Exists(Box<Expression<'a>>),
    ForAll(Box<Expression<'a>>),
    Get(Box<Expression<'a>>),
    UMinusPlus(Box<Expression<'a>>),
    Not(Box<Expression<'a>>),
    NotExists(Box<Expression<'a>>),
    UPlusMinus(Box<Expression<'a>>),
    Slot(Box<Expression<'a>>),
    SlotSequence(Box<Expression<'a>>),
    Sqrt(Box<Expression<'a>>),
    Square(Box<Expression<'a>>),
    Transpose(Box<Expression<'a>>),
    Conjugate(Box<Expression<'a>>),
    ConjugateTranspose(Box<Expression<'a>>),
    PostfixIncrement(Box<Expression<'a>>),
    PostfixDecrement(Box<Expression<'a>>),
    Degree(Box<Expression<'a>>),
    Factorial(Box<Expression<'a>>),
    SuperDagger(Box<Expression<'a>>),
    PureFunction(Box<Expression<'a>>),
    Pattern(Args<'a>),
    TagSet(Args<'a>),
    TagSetDelayed(Args<'a>),
    TagUnset(Args<'a>),
    AddTo(Args<'a>),
    Alternatives(Args<'a>),
    And(Args<'a>),
    Apply(Args<'a>),
    Apply1(Args<'a>),
    Backslash(Args<'a>),
    Because(Args<'a>),
    Cap(Args<'a>),
    CenterDot(Args<'a>),
    CircleDot(Args<'a>),
    CircleMinus(Args<'a>),
    CirclePlus(Args<'a>),
    CircleTimes(Args<'a>),
    Colon(Args<'a>),
    Composition(Args<'a>),
    Condition(Args<'a>),
    Conditioned(Args<'a>),
    Congruent(Args<'a>),
    Coproduct(Args<'a>),
    Cross(Args<'a>),
    Cup(Args<'a>),
    CupCap(Args<'a>),
    Diamond(Args<'a>),
    DifferenceDelta(Args<'a>),
    DirectedEdge(Args<'a>),
    DiscreteRatio(Args<'a>),
    DiscreteShift(Args<'a>),
    Distributed(Args<'a>),
    DivideBy(Args<'a>),
    DotEqual(Args<'a>),
    DoubleDownArrow(Args<'a>),
    DoubleLeftTee(Args<'a>),
    DoubleRightTee(Args<'a>),
    DoubleUpArrow(Args<'a>),
    DoubleVerticalBar(Args<'a>),
    DownArrow(Args<'a>),
    DownArrowBar(Args<'a>),
    DownLeftRightVector(Args<'a>),
    DownLeftTeeVector(Args<'a>),
    DownLeftVector(Args<'a>),
    DownLeftVectorBar(Args<'a>),
    DownRightTeeVector(Args<'a>),
    DownRightVector(Args<'a>),
    DownRightVectorBar(Args<'a>),
    DownTee(Args<'a>),
    DownTeeArrow(Args<'a>),
    Element(Args<'a>),
    Equal(Args<'a>),
    EqualTilde(Args<'a>),
    Equilibrium(Args<'a>),
    Equivalent(Args<'a>),
    Greater(Args<'a>),
    GreaterEqual(Args<'a>),
    GreaterEqualLess(Args<'a>),
    GreaterFullEqual(Args<'a>),
    GreaterGreater(Args<'a>),
    GreaterLess(Args<'a>),
    GreaterSlantEqual(Args<'a>),
    GreaterTilde(Args<'a>),
    HumpDownHump(Args<'a>),
    HumpEqual(Args<'a>),
    Implies(Args<'a>),
    Increment(Args<'a>),
    Infix(Args<'a>),
    Intersection(Args<'a>),
    LeftDownTeeVector(Args<'a>),
    LeftDownVector(Args<'a>),
    LeftDownVectorBar(Args<'a>),
    LeftRightVector(Args<'a>),
    LeftTee(Args<'a>),
    LeftTeeVector(Args<'a>),
    LeftTriangle(Args<'a>),
    LeftTriangleBar(Args<'a>),
    LeftTriangleEqual(Args<'a>),
    LeftUpDownVector(Args<'a>),
    LeftUpTeeVector(Args<'a>),
    LeftUpVector(Args<'a>),
    LeftUpVectorBar(Args<'a>),
    LeftVector(Args<'a>),
    LeftVectorBar(Args<'a>),
    Less(Args<'a>),
    LessEqual(Args<'a>),
    LessEqualGreater(Args<'a>),
    LessFullEqual(Args<'a>),
    LessGreater(Args<'a>),
    LessLess(Args<'a>),
    LessSlantEqual(Args<'a>),
    LessTilde(Args<'a>),
    Limit(Args<'a>),
    LeftList(Args<'a>),
    RightList(Args<'a>),
    Map(Args<'a>),
    MapAll(Args<'a>),
    MaxLimit(Args<'a>),
    MessageName(Args<'a>),
    MinLimit(Args<'a>),
    MinusPlus(Args<'a>),
    Nand(Args<'a>),
    NestedGreaterGreater(Args<'a>),
    NestedLessLess(Args<'a>),
    NonCommutativeMultiply(Args<'a>),
    Nor(Args<'a>),
    NotCongruent(Args<'a>),
    NotCupCap(Args<'a>),
    NotDoubleVerticalBar(Args<'a>),
    NotElement(Args<'a>),
    NotGreater(Args<'a>),
    NotGreaterEqual(Args<'a>),
    NotGreaterFullEqual(Args<'a>),
    NotGreaterGreater(Args<'a>),
    NotGreaterLess(Args<'a>),
    NotGreaterSlantEqual(Args<'a>),
    NotGreaterTilde(Args<'a>),
    NotHumpDownHump(Args<'a>),
    NotHumpEqual(Args<'a>),
    NotLeftTriangle(Args<'a>),
    NotLeftTriangleBar(Args<'a>),
    NotLeftTriangleEqual(Args<'a>),
    NotLess(Args<'a>),
    NotLessEqual(Args<'a>),
    NotLessFullEqual(Args<'a>),
    NotLessGreater(Args<'a>),
    NotLessLess(Args<'a>),
    NotLessSlantEqual(Args<'a>),
    NotLessTilde(Args<'a>),
    NotNestedGreaterGreater(Args<'a>),
    NotNestedLessLess(Args<'a>),
    NotPrecedes(Args<'a>),
    NotPrecedesEqual(Args<'a>),
    NotPrecedesSlantEqual(Args<'a>),
    NotPrecedesTilde(Args<'a>),
    NotReverseElement(Args<'a>),
    NotRightTriangle(Args<'a>),
    NotRightTriangleBar(Args<'a>),
    NotRightTriangleEqual(Args<'a>),
    NotSquareSubset(Args<'a>),
    NotSquareSubsetEqual(Args<'a>),
    NotSquareSuperset(Args<'a>),
    NotSquareSupersetEqual(Args<'a>),
    NotSubset(Args<'a>),
    NotSubsetEqual(Args<'a>),
    NotSucceeds(Args<'a>),
    NotSucceedsEqual(Args<'a>),
    NotSucceedsSlantEqual(Args<'a>),
    NotSucceedsTilde(Args<'a>),
    NotSuperset(Args<'a>),
    NotSupersetEqual(Args<'a>),
    NotTilde(Args<'a>),
    NotTildeEqual(Args<'a>),
    NotTildeFullEqual(Args<'a>),
    NotTildeTilde(Args<'a>),
    NotVerticalBar(Args<'a>),
    Optional(Args<'a>),
    Or(Args<'a>),
    PatternTest(Args<'a>),
    Piecewise(Args<'a>),
    PlusMinus(Args<'a>),
    Postfix(Args<'a>),
    Precedes(Args<'a>),
    PrecedesEqual(Args<'a>),
    PrecedesSlantEqual(Args<'a>),
    PrecedesTilde(Args<'a>),
    Prefix(Args<'a>),
    Proportion(Args<'a>),
    Proportional(Args<'a>),
    Repeated(Args<'a>),
    RepeatedNull(Args<'a>),
    ReplaceAll(Args<'a>),
    ReplaceRepeated(Args<'a>),
    ReverseElement(Args<'a>),
    ReverseEquilibrium(Args<'a>),
    ReverseUpEquilibrium(Args<'a>),
    RightDownTeeVector(Args<'a>),
    RightDownVector(Args<'a>),
    RightDownVectorBar(Args<'a>),
    RightTee(Args<'a>),
    RightTeeVector(Args<'a>),
    RightTriangle(Args<'a>),
    RightTriangleBar(Args<'a>),
    RightTriangleEqual(Args<'a>),
    RightUpDownVector(Args<'a>),
    RightUpTeeVector(Args<'a>),
    RightUpVector(Args<'a>),
    RightUpVectorBar(Args<'a>),
    RightVector(Args<'a>),
    RightVectorBar(Args<'a>),
    Rule(Args<'a>),
    RuleDelayed(Args<'a>),
    SameQ(Args<'a>),
    SetDelayed(Args<'a>),
    SmallCircle(Args<'a>),
    Span(Args<'a>),
    SquareIntersection(Args<'a>),
    SquareSubset(Args<'a>),
    SquareSubsetEqual(Args<'a>),
    SquareSuperset(Args<'a>),
    SquareSupersetEqual(Args<'a>),
    SquareUnion(Args<'a>),
    Star(Args<'a>),
    StringExpression(Args<'a>),
    StringJoin(Args<'a>),
    Subset(Args<'a>),
    SubsetEqual(Args<'a>),
    Subtract(Args<'a>),
    SubtractFrom(Args<'a>),
    Succeeds(Args<'a>),
    SucceedsEqual(Args<'a>),
    SucceedsSlantEqual(Args<'a>),
    SucceedsTilde(Args<'a>),
    SuchThat(Args<'a>),
    Superset(Args<'a>),
    SupersetEqual(Args<'a>),
    Therefore(Args<'a>),
    Tilde(Args<'a>),
    TildeEqual(Args<'a>),
    TildeFullEqual(Args<'a>),
    TildeTilde(Args<'a>),
    TimesBy(Args<'a>),
    TwoWayRule(Args<'a>),
    UndirectedEdge(Args<'a>),
    Unequal(Args<'a>),
    Union(Args<'a>),
    UnionPlus(Args<'a>),
    UnsameQ(Args<'a>),
    Unset(Args<'a>),
    UpArrow(Args<'a>),
    UpArrowBar(Args<'a>),
    UpEquilibrium(Args<'a>),
    UpTee(Args<'a>),
    VectorGreater(Args<'a>),
    VectorGreaterEqual(Args<'a>),
    VectorLess(Args<'a>),
    VectorLessEqual(Args<'a>),
    Vee(Args<'a>),
    VerticalBar(Args<'a>),
    VerticalSeparator(Args<'a>),
    VerticalTilde(Args<'a>),
    Wedge(Args<'a>),
    Xnor(Args<'a>),
    Xor(Args<'a>),
}

#[derive(Copy,Clone,Default,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub struct Integer<'a>(pub &'a [u8]);

impl<'a> From<Integer<'a>> for Expression<'a> {
    fn from(int: Integer<'a>) -> Self {
        Expression::Integer(int.0)
    }
}

#[derive(Copy,Clone,Default,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub struct Real<'a>(pub &'a [u8]);

impl<'a> From<Real<'a>> for Expression<'a> {
    fn from(real: Real<'a>) -> Self {
        Expression::Real(real.0)
    }
}

#[derive(Copy,Clone,Default,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub struct Symbol<'a>(pub &'a [u8]);

impl<'a> From<Symbol<'a>> for Expression<'a> {
    fn from(sym: Symbol<'a>) -> Self {
        Expression::Symbol(sym.0)
    }
}

#[derive(Copy,Clone,Eq,Default,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub struct Ellipsis {}

impl<'a> From<Ellipsis> for Expression<'a> {
    fn from(_dots: Ellipsis) -> Self {
        Expression::Ellipsis
    }
}
