use super::grammar::*;

use crate::arity::Arity;
use crate::expression::*;

use std::collections::{HashMap, HashSet};

#[derive(Copy,Clone,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub(crate) enum Token<'a> {
    Symbol(&'a [u8]),
    Integer(&'a [u8]),
    Real(&'a [u8]),
    Static(StaticToken),
}

#[derive(Copy,Clone,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub(crate) enum StaticToken {
    Sum,
    D,
    // I,
    // E,
    Pi,
    Product,
    // AddTo,
    And,
    LeftAngleBracket,
    RightAngleBracket,
    // Backslash,
    Because,
    DoubleFactorial,
    LeftBracket,
    RightBracket,
    LeftBrace,
    RightBrace,
    // Cap,
    //CapitalDifferentialD,
    LeftCeiling,
    RightCeiling,
    CenterDot,
    CircleDot,
    CircleMinus,
    CirclePlus,
    CircleTimes,
    Colon,
    Comma,
    SemiColon,
    //Conditioned,
    Congruent,
    // Conjugate,
    ConjugateTranspose,
    //ContinuedFractionK,
    // Coproduct,
    // Cross,
    // Cup,
    // CupCap,
    //Decrement,
    // Degree,
    Del,
    // Diamond,
    //DifferenceDelta,
    //DirectedEdge,
    //Distributed,
    Divide,
    // DivideBy,
    Dot,
    // DotEqual,
    // LeftDoubleBracketingBar,
    // RightDoubleBracketingBar,
    // DoubleDownArrow,
    // DoubleLeftTee,
    // DoubleRightTee,
    // DoubleUpArrow,
    // DoubleVerticalBar,
    // DownArrow,
    // DownArrowBar,
    // DownLeftRightVector,
    // DownLeftTeeVector,
    // DownLeftVector,
    // DownLeftVectorBar,
    // DownRightTeeVector,
    // DownRightVector,
    // DownRightVectorBar,
    // DownTee,
    // DownTeeArrow,
    Element,
    Equal,
    // EqualTilde,
    // Equilibrium,
    Equivalent,
    Exists,
    Frac,
    LeftFloor,
    RightFloor,
    ForAll,
    // Function,
    // Get,
    Greater,
    GreaterEqual,
    // GreaterEqualLess,
    // GreaterFullEqual,
    GreaterGreater,
    // GreaterLess,
    // GreaterSlantEqual,
    GreaterSim,
    // HumpDownHump,
    // HumpEqual,
    Implies,
    // Increment,
    Infinity,
    Integrate,
    Intersection,
    // LeftDownTeeVector,
    // LeftDownVector,
    // LeftDownVectorBar,
    // LeftRightVector,
    // LeftTee,
    // LeftTeeVector,
    // LeftTriangle,
    // LeftTriangleBar,
    // LeftTriangleEqual,
    // LeftUpDownVector,
    // LeftUpTeeVector,
    // LeftUpVector,
    // LeftUpVectorBar,
    // LeftVector,
    // LeftVectorBar,
    Less,
    LessEqual,
    // LessEqualGreater,
    // LessFullEqual,
    LessGreater,
    LessLess,
    // LessSlantEqual,
    LessSim,
    Limit,
    // LeftList,
    // RightList,
    // MaxLimit,
    // MinLimit,
    MinusPlus,
    // NestedGreaterGreater,
    // NestedLessLess,
    // NonCommutativeMultiply,
    // Nor,
    Not,
    // NotCongruent,
    // NotCupCap,
    // NotDoubleVerticalBar,
    NotElement,
    NotExists,
    NotGreater,
    NotGreaterEqual,
    // NotGreaterFullEqual,
    NotGreaterGreater,
    // NotGreaterLess,
    // NotGreaterSlantEqual,
    NotGreaterSim,
    // NotHumpDownHump,
    // NotHumpEqual,
    // NotLeftTriangle,
    // NotLeftTriangleBar,
    // NotLeftTriangleEqual,
    NotLess,
    NotLessEqual,
    // NotLessFullEqual,
    // NotLessGreater,
    NotLessLess,
    // NotLessSlantEqual,
    NotLessSim,
    // NotNestedGreaterGreater,
    // NotNestedLessLess,
    // NotPrecedes,
    // NotPrecedesEqual,
    // NotPrecedesSlantEqual,
    // NotPrecedesTilde,
    // NotReverseElement,
    // NotRightTriangle,
    // NotRightTriangleBar,
    // NotRightTriangleEqual,
    // NotSquareSubset,
    // NotSquareSubsetEqual,
    // NotSquareSuperset,
    // NotSquareSupersetEqual,
    // NotSubset,
    NotSubsetEqual,
    // NotSucceeds,
    // NotSucceedsEqual,
    // NotSucceedsSlantEqual,
    // NotSucceedsTilde,
    // NotSuperset,
    NotSupersetEqual,
    // NotTilde,
    // NotTildeEqual,
    // NotTildeFullEqual,
    // NotTildeTilde,
    // NotVerticalBar,
    Or,
    Plus,
    PlusMinus,
    Power,
    // Precedes,
    // PrecedesEqual,
    // PrecedesSlantEqual,
    // PrecedesTilde,
    // Proportion,
    Proportional,
    // ReverseElement,
    // ReverseEquilibrium,
    // ReverseUpEquilibrium,
    // RightDownTeeVector,
    // RightDownVector,
    // RightDownVectorBar,
    // RightTee,
    // RightTeeVector,
    // RightTriangle,
    // RightTriangleBar,
    // RightTriangleEqual,
    // RightUpDownVector,
    // RightUpTeeVector,
    // RightUpVector,
    // RightUpVectorBar,
    // RightVector,
    // RightVectorBar,
    // SmallCircle,
    Sqrt,
    // Square,
    // LeftSquareBracket,
    // RightSquareBracket,
    // SquareIntersection,
    // SquareSubset,
    // SquareSubsetEqual,
    // SquareSuperset,
    // SquareSupersetEqual,
    // SquareUnion,
    // Star,
    Subset,
    SubsetEqual,
    Minus,
    // Succeeds,
    // SucceedsEqual,
    // SucceedsSlantEqual,
    // SucceedsTilde,
    // SuchThat,
    Superset,
    SupersetEqual,
    Therefore,
    Sim,
    SimEqual,
    // SimFullEqual,
    Approx,
    Times,
    // Transpose,
    // UndirectedEdge,
    Unequal,
    Union,
    // UnionPlus,
    // UnsameQ,
    // UpArrow,
    // UpArrowBar,
    // UpEquilibrium,
    // UpTee,
    // VectorGreater,
    // VectorGreaterEqual,
    // VectorLess,
    // VectorLessEqual,
    Vee,
    // VerticalBar,
    // VerticalSeparator,
    // VerticalTilde,
    Wedge,
    // Xnor,
    // Xor,
    Log,
    Exp,
    Sin,
    Cos,
    Tan,
    Sinh,
    Cosh,
    Tanh,
    ArcSin,
    ArcCos,
    ArcTan,
    // ArcSinh,
    // ArcCosh,
    // ArcTanh,
    Subscript,
}

lazy_static!{
    pub(crate) static ref MAX_TOKEN_STR_LEN: usize = BUILTIN.keys().map(|k| k.len()).max().unwrap();
}

pub(crate) const BUILTIN: phf::Map<&'static [u8], StaticToken> = phf_map!{
    br"\sum" => StaticToken::Sum,
    br"\partial" => StaticToken::D,
    // I,
    // E,
    br"\pi" => StaticToken::Pi,
    br"\prod" => StaticToken::Product,
    br"\land" => StaticToken::And,
    br"\langle" => StaticToken::LeftAngleBracket,
    br"\rangle" => StaticToken::RightAngleBracket,
    br"\because" => StaticToken::Because,
    br"!!" => StaticToken::DoubleFactorial,
    br"(" => StaticToken::LeftBracket,
    br"[" => StaticToken::LeftBracket,
    br"{" => StaticToken::LeftBrace,
    br")" => StaticToken::RightBracket,
    br"]" => StaticToken::RightBracket,
    br"}" => StaticToken::RightBrace,
    br"\cup" => StaticToken::Union,
    br"\bigcup" => StaticToken::Union,
    br"\lceil" => StaticToken::LeftCeiling,
    br"\rceil" => StaticToken::RightCeiling,
    br"\cdot" => StaticToken::CenterDot,
    br"\odot" => StaticToken::CircleDot,
    br"\bigodot" => StaticToken::CircleDot,
    br"\ominus" => StaticToken::CircleMinus,
    br"\oplus" => StaticToken::CirclePlus,
    br"\bigoplus" => StaticToken::CirclePlus,
    br"\otimes" => StaticToken::CircleTimes,
    br"\bigotimes" => StaticToken::CircleTimes,
    br":" => StaticToken::Colon,
    br"," => StaticToken::Comma,
    br";" => StaticToken::SemiColon,
    br"\cong" => StaticToken::Congruent,
    //Conjugate,
    br"\dagger" => StaticToken::ConjugateTranspose,
    //Coproduct,
    //Cross,
    //Degree,
    br"\nabla" => StaticToken::Del,
    br"/" => StaticToken::Divide,
    br"\over" => StaticToken::Divide,
    br"." => StaticToken::Dot,
    br"\in" => StaticToken::Element,
    br"=" => StaticToken::Equal,
    br"\equiv" => StaticToken::Equivalent,
    br"\exists" => StaticToken::Exists,
    br"\frac" => StaticToken::Frac,
    br"\lfloor" => StaticToken::LeftFloor,
    br"\rfloor" => StaticToken::RightFloor,
    br"\forall" => StaticToken::ForAll,
    br">" => StaticToken::Greater,
    br"\ge" => StaticToken::GreaterEqual,
    br"\geq" => StaticToken::GreaterEqual,
    br"\gg" => StaticToken::GreaterGreater,
    br"\gtrsim" => StaticToken::GreaterSim,
    br"\Rightarrow" => StaticToken::Implies,
    br"\infty" => StaticToken::Infinity,
    br"\int" => StaticToken::Integrate,
    br"\cap" => StaticToken::Intersection,
    br"\bigcap" => StaticToken::Intersection,
    br"<" => StaticToken::Less,
    br"\le" => StaticToken::LessEqual,
    br"\leq" => StaticToken::LessEqual,
    br"\lessgtr" => StaticToken::LessGreater,
    br"\ll" => StaticToken::LessLess,
    br"\lessim" => StaticToken::LessSim,
    br"\lim" => StaticToken::Limit,
    br"\mp" => StaticToken::MinusPlus,
    br"\lnot" => StaticToken::Not,
    br"\neg" => StaticToken::Not,
    br"\notin" => StaticToken::NotElement,
    br"\not\in" => StaticToken::NotElement,
    br"\nexists" => StaticToken::NotExists,
    br"\ngtr" => StaticToken::NotGreater,
    br"\ngeq" => StaticToken::NotGreaterEqual,
    br"\not\gg" => StaticToken::NotGreaterGreater,
    br"\gnsim" => StaticToken::NotGreaterSim,
    br"\nless" => StaticToken::NotLess,
    br"\nleq" => StaticToken::NotLessEqual,
    br"\not\ll" => StaticToken::NotLessLess,
    br"\lnsim" => StaticToken::NotLessSim,
    br"\nsubseteq" => StaticToken::NotSubsetEqual,
    br"\subsetneq" => StaticToken::NotSubsetEqual,
    br"\varsubsetneq" => StaticToken::NotSubsetEqual,
    br"\nsupseteq" => StaticToken::NotSupersetEqual,
    br"\supsetneq" => StaticToken::NotSupersetEqual,
    br"\varsupsetneq" => StaticToken::NotSupersetEqual,
    br"\lor" => StaticToken::Or,
    br"+" => StaticToken::Plus,
    br"\pm" => StaticToken::PlusMinus,
    br"^" => StaticToken::Power,
    br"\propto" => StaticToken::Proportional,
    br"\sqrt" => StaticToken::Sqrt,
    br"\subset" => StaticToken::Subset,
    br"\subseteq" => StaticToken::SubsetEqual,
    br"-" => StaticToken::Minus,
    br"\supset" => StaticToken::Superset,
    br"\supseteq" => StaticToken::SupersetEqual,
    br"\therefore" => StaticToken::Therefore,
    br"\sim" => StaticToken::Sim,
    br"\simeq" => StaticToken::SimEqual,
    br"\approx" => StaticToken::Approx,
    br"\times" => StaticToken::Times,
    br"\ne" => StaticToken::Unequal,
    br"\neq" => StaticToken::Unequal,
    br"\wedge" => StaticToken::Wedge,
    br"\ln" => StaticToken::Log,
    br"\log" => StaticToken::Log,
    br"\exp" => StaticToken::Exp,
    br"\sin" => StaticToken::Sin,
    br"\cos" => StaticToken::Cos,
    br"\tan" => StaticToken::Tan,
    br"\sinh" => StaticToken::Sinh,
    br"\cosh" => StaticToken::Cosh,
    br"\tanh" => StaticToken::Tanh,
    br"\arcsin" => StaticToken::ArcSin,
    br"\arccos" => StaticToken::ArcCos,
    br"\arctan" => StaticToken::ArcTan,
    br"_" => StaticToken::Subscript,
    br"\vee" => StaticToken::Vee,
};


// lazy_static! {
//     pub(crate) static ref TOKEN_PREC: HashMap<StaticToken, u32> = hashmap!{
//         StaticToken::Product => PREC_PRODUCT,
//         StaticToken::AddTo => PREC_ADD_TO,
//         StaticToken::Alternatives => PREC_ALTERNATIVES,
//         StaticToken::And => PREC_AND,
//         StaticToken::LeftAngleBracket => PREC_LEFT_ANGLE_BRACKET,
//         StaticToken::RightAngleBracket => PREC_RIGHT_ANGLE_BRACKET,
//         StaticToken::Apply => PREC_APPLY,
//         StaticToken::Apply1 => PREC_APPLY,
//         StaticToken::LeftAssociation => PREC_LEFT_ASSOCIATION,
//         StaticToken::RightAssociation => PREC_RIGHT_ASSOCIATION,
//         StaticToken::Backslash => PREC_BACKSLASH,
//         StaticToken::Because => PREC_BECAUSE,
//         StaticToken::Blank => PREC_BLANK,
//         StaticToken::BlankNullSequence => PREC_BLANK_NULL_SEQUENCE,
//         StaticToken::BlankSequence => PREC_BLANK_SEQUENCE,
//         StaticToken::LeftBracket => PREC_LEFT_BRACKET,
//         StaticToken::LeftPart => PREC_LEFT_PART,
//         StaticToken::RightPart => PREC_RIGHT_PART,
//         StaticToken::RightBracket => PREC_RIGHT_BRACKET,
//         StaticToken::Cap => PREC_CAP,
//         StaticToken::LeftCeiling => PREC_LEFT_CEILING,
//         StaticToken::RightCeiling => PREC_RIGHT_CEILING,
//         StaticToken::CircleMinus => PREC_CIRCLE_MINUS,
//         StaticToken::CirclePlus => PREC_CIRCLE_PLUS,
//         StaticToken::CircleTimes => PREC_CIRCLE_TIMES,
//         StaticToken::Colon => PREC_COLON,
//         StaticToken::Comma => PREC_SEQUENCE,
//         StaticToken::Composition => PREC_COMPOSITION,
//         StaticToken::CompoundExpression => PREC_COMPOUND_EXPRESSION,
//         StaticToken::Condition => PREC_CONDITION,
//         StaticToken::Conjugate => PREC_CONJUGATE,
//         StaticToken::ConjugateTranspose => PREC_CONJUGATE_TRANSPOSE,
//         StaticToken::ConjugateTranspose => PREC_CONJUGATE_TRANSPOSE,
//         StaticToken::Cross => PREC_CROSS,
//         StaticToken::Cup => PREC_CUP,
//         StaticToken::CupCap => PREC_CUP, // guess
//         StaticToken::Decrement => PREC_DECREMENT,
//         StaticToken::Del => PREC_DEL,
//         StaticToken::Diamond => PREC_DIAMOND,
//         StaticToken::DifferenceDelta => PREC_DIFFERENCE_DELTA,
//         StaticToken::DiscreteRatio => PREC_DISCRETE_RATIO,
//         StaticToken::DiscreteShift => PREC_DISCRETE_SHIFT,
//         StaticToken::Divide => PREC_DIVIDE,
//         StaticToken::Divide => PREC_DIVIDE,
//         StaticToken::DivideBy => PREC_DIVIDE_BY,
//         StaticToken::Dot => PREC_DOT,
//         StaticToken::DotEqual => PREC_EQUAL, // guess
//         StaticToken::DoubleFactorial => PREC_FACTORIAL2,
//         StaticToken::DownTee => PREC_DOWN_TEE,
//         StaticToken::E => PREC_SYMBOL,
//         StaticToken::Element => PREC_ELEMENT,
//         StaticToken::Equal => PREC_EQUAL,
//         StaticToken::Equal => PREC_EQUAL,
//         StaticToken::Equal => PREC_EQUAL,
//         StaticToken::EqualTilde => PREC_EQUAL, // guess
//         StaticToken::Equivalent => PREC_EQUIVALENT,
//         StaticToken::Exists => PREC_EXISTS,
//         StaticToken::LeftFloor => PREC_LEFT_FLOOR,
//         StaticToken::RightFloor => PREC_RIGHT_FLOOR,
//         StaticToken::ForAll => PREC_FOR_ALL,
//         StaticToken::Function => PREC_FUNCTION,
//         StaticToken::Get => PREC_GET,
//         StaticToken::Greater => PREC_GREATER,
//         StaticToken::GreaterEqual => PREC_GREATER_EQUAL,
//         StaticToken::GreaterEqual => PREC_GREATER_EQUAL,
//         StaticToken::GreaterEqualLess => PREC_GREATER_EQUAL, // guess
//         StaticToken::GreaterFullEqual => PREC_GREATER_EQUAL, // guess
//         StaticToken::GreaterGreater => PREC_GREATER, // guess
//         StaticToken::GreaterLess => PREC_GREATER, // guess
//         StaticToken::GreaterSlantEqual => PREC_GREATER,  // guess
//         StaticToken::GreaterTilde => PREC_GREATER,  // guess
//         StaticToken::I => PREC_SYMBOL,
//         StaticToken::Implies => PREC_IMPLIES,
//         StaticToken::Increment => PREC_INCREMENT,
//         StaticToken::Infinity => PREC_SYMBOL,
//         StaticToken::Integrate => PREC_INTEGRATE,
//         StaticToken::Intersection => PREC_INTERSECTION,
//         StaticToken::LeftSquareBracket => PREC_LEFT_SQUARE_BRACKET,
//         StaticToken::RightSquareBracket => PREC_RIGHT_SQUARE_BRACKET,
//         StaticToken::LeftTee => PREC_LEFT_TEE,
//         StaticToken::Less => PREC_LESS,
//         StaticToken::LessEqual => PREC_LESS_EQUAL,
//         StaticToken::LessEqualGreater => PREC_LESS_EQUAL, // guess
//         StaticToken::LessFullEqual => PREC_LESS_EQUAL, // guess
//         StaticToken::LessGreater => PREC_LESS,  // guess
//         StaticToken::LessLess => PREC_LESS, // guess
//         StaticToken::LessSlantEqual => PREC_LESS_EQUAL, // guess
//         StaticToken::LessTilde => PREC_LESS, // guess
//         StaticToken::Limit => PREC_LIMIT,
//         StaticToken::LeftList => PREC_LEFT_CURLY_BRACKET,
//         StaticToken::RightList => PREC_RIGHT_CURLY_BRACKET,
//         StaticToken::Map => PREC_MAP,
//         StaticToken::MapAll => PREC_MAP_ALL,
//         StaticToken::MaxLimit => PREC_MAX_LIMIT,
//         StaticToken::MessageName => PREC_MESSAGE_NAME,
//         StaticToken::MinLimit => PREC_MIN_LIMIT,
//         StaticToken::MinusPlus => PREC_MINUS_PLUS,
//         StaticToken::Nand => PREC_NAND,
//         StaticToken::NestedGreaterGreater => PREC_GREATER, // guess
//         StaticToken::NestedLessLess => PREC_LESS, // guess
//         StaticToken::NonCommutativeMultiply => PREC_NON_COMMUTATIVE_MULTIPLY,
//         StaticToken::Nor => PREC_NOR,
//         StaticToken::Not => PREC_FACTORIAL,
//         // the following precedences are uneducated guesses
//         StaticToken::NotCupCap => PREC_CUP,
//         StaticToken::NotDoubleVerticalBar => PREC_DOUBLE_VERTICAL_BAR,
//         StaticToken::NotElement => PREC_ELEMENT,
//         StaticToken::NotExists => PREC_EXISTS,
//         StaticToken::NotGreater => PREC_GREATER,
//         StaticToken::NotGreaterEqual => PREC_GREATER_EQUAL,
//         StaticToken::NotGreaterFullEqual => PREC_GREATER_EQUAL,
//         StaticToken::NotGreaterGreater => PREC_GREATER,
//         StaticToken::NotGreaterLess => PREC_GREATER,
//         StaticToken::NotGreaterSlantEqual => PREC_GREATER_EQUAL,
//         StaticToken::NotGreaterTilde => PREC_GREATER_EQUAL,
//         StaticToken::NotLess => PREC_LESS,
//         StaticToken::NotLessEqual => PREC_LESS_EQUAL,
//         StaticToken::NotLessFullEqual => PREC_LESS_EQUAL,
//         StaticToken::NotLessGreater => PREC_LESS,
//         StaticToken::NotLessLess => PREC_LESS,
//         StaticToken::NotLessSlantEqual => PREC_LESS_EQUAL,
//         StaticToken::NotLessTilde => PREC_LESS,
//         StaticToken::NotNestedGreaterGreater => PREC_GREATER,
//         StaticToken::NotNestedLessLess => PREC_LESS,
//         StaticToken::Coproduct => PREC_COPRODUCT,
//         StaticToken::NotSubset => PREC_SUBSET,
//         StaticToken::NotSuperset => PREC_SUPERSET,
//         StaticToken::NotVerticalBar => PREC_VERTICAL_BAR,
//         // the previous precedences are uneducated guesses
//         StaticToken::Optional => PREC_OPTIONAL,
//         StaticToken::Or => PREC_OR,
//         StaticToken::Or => PREC_OR,
//         StaticToken::Out => PREC_OUT,
//         StaticToken::Pattern => PREC_PATTERN,
//         StaticToken::PatternTest => PREC_PATTERN_TEST,
//         StaticToken::Piecewise => PREC_PIECEWISE,
//         StaticToken::Plus => PREC_PLUS,
//         StaticToken::Minus => PREC_MINUS,
//         StaticToken::PlusMinus => PREC_PLUS_MINUS,
//         StaticToken::Postfix => PREC_POSTFIX,
//         StaticToken::Power => PREC_POWER,
//         StaticToken::Repeated => PREC_REPEATED,
//         StaticToken::RepeatedNull => PREC_REPEATED_NULL,
//         StaticToken::ReplaceAll => PREC_REPLACE_ALL,
//         StaticToken::ReplaceRepeated => PREC_REPLACE_REPEATED,
//         StaticToken::RightTee => PREC_RIGHT_TEE,
//         StaticToken::Rule => PREC_RULE,
//         StaticToken::Rule => PREC_RULE,
//         StaticToken::RuleDelayed => PREC_RULE_DELAYED,
//         StaticToken::RuleDelayed => PREC_RULE_DELAYED,
//         StaticToken::SameQ => PREC_SAME_Q,
//         StaticToken::Set => PREC_SET,
//         StaticToken::SetDelayed => PREC_SET_DELAYED,
//         StaticToken::Slot => PREC_SLOT,
//         StaticToken::SlotSequence => PREC_SLOT_SEQUENCE,
//         StaticToken::SmallCircle => PREC_SMALL_CIRCLE,
//         StaticToken::Span => PREC_SPAN,
//         //StaticToken::Sqrt => PREC_SQRT,
//         StaticToken::Square => PREC_SQUARE,
//         StaticToken::Star => PREC_STAR,
//         StaticToken::StringExpression => PREC_STRING_EXPRESSION,
//         StaticToken::StringJoin => PREC_STRING_JOIN,
//         StaticToken::D => PREC_D,
//         StaticToken::Subset => PREC_SUBSET,
//         StaticToken::MinusFrom => PREC_SUBTRACT_FROM,
//         StaticToken::SuchThat => PREC_SUCH_THAT,
//         StaticToken::Superset => PREC_SUPERSET,
//         StaticToken::TagSet => PREC_TAG_SET,
//         StaticToken::TagSetDelayed => PREC_TAG_SET_DELAYED,
//         StaticToken::TagUnset => PREC_TAG_UNSET,
//         StaticToken::Therefore => PREC_THEREFORE,
//         StaticToken::Times => PREC_TIMES,
//         StaticToken::Times => PREC_TIMES,
//         StaticToken::TimesBy => PREC_TIMES_BY,
//         StaticToken::Transpose => PREC_TRANSPOSE,
//         StaticToken::TwoWayRule => PREC_TWO_WAY_RULE,
//         StaticToken::Unequal => PREC_UNEQUAL,
//         StaticToken::Unequal => PREC_UNEQUAL,
//         StaticToken::Union => PREC_UNION,
//         StaticToken::UnsameQ => PREC_UNSAME_Q,
//         StaticToken::Unset => PREC_UNSET,
//         StaticToken::UpTee => PREC_UP_TEE,
//         StaticToken::VerticalBar => PREC_VERTICAL_BAR,
//         StaticToken::VerticalSeparator => PREC_VERTICAL_SEPARATOR,
//         StaticToken::VerticalTilde => PREC_VERTICAL_TILDE,
//         StaticToken::Wedge => PREC_WEDGE,
//         StaticToken::Xnor => PREC_XNOR,
//         StaticToken::Xor => PREC_XOR,
//         StaticToken::Log => PREC_SYMBOL,
//         StaticToken::Exp => PREC_SYMBOL,
//         StaticToken::Sin => PREC_SYMBOL,
//         StaticToken::Cos => PREC_SYMBOL,
//         StaticToken::Tan => PREC_SYMBOL,
//         StaticToken::Sinh => PREC_SYMBOL,
//         StaticToken::Cosh => PREC_SYMBOL,
//         StaticToken::Tanh => PREC_SYMBOL,
//         StaticToken::ArcSin => PREC_SYMBOL,
//         StaticToken::ArcCos => PREC_SYMBOL,
//         StaticToken::ArcTan => PREC_SYMBOL,
//         StaticToken::ArcSinh => PREC_SYMBOL,
//         StaticToken::ArcCosh => PREC_SYMBOL,
//         StaticToken::ArcTanh => PREC_SYMBOL,
//         StaticToken::Sqrt => PREC_SYMBOL,
//     };
// }


// lazy_static! {
//     pub(crate) static ref UNKNOWN_TOKEN_PREC: HashSet<StaticToken> = hashset!{
//         StaticToken::Tilde,
//         StaticToken::SupersetEqual,
//         StaticToken::Tag,
//         StaticToken::TildeEqual,
//         StaticToken::TildeFullEqual,
//         StaticToken::TildeTilde,
//         StaticToken::Succeeds,
//         StaticToken::SucceedsEqual,
//         StaticToken::SucceedsSlantEqual,
//         StaticToken::SucceedsTilde,
//         StaticToken::Sum,
//         StaticToken::SuperDagger,
//         StaticToken::UnionPlus,
//         StaticToken::UndirectedEdge,
//         StaticToken::UpArrow,
//         StaticToken::UpArrowBar,
//         StaticToken::UpEquilibrium,
//         StaticToken::ContinuedFractionK,
//         StaticToken::Conditioned,
//         StaticToken::CenterDot,
//         StaticToken::CircleDot,
// //        StaticToken::CubeRoot,
//         StaticToken::Infix,
//         StaticToken::IntegralMeasure,
// //        StaticToken::Laplacian,
//         StaticToken::LeftDownTeeVector,
//         StaticToken::LeftDownVector,
//         StaticToken::NotPrecedes,
//         StaticToken::NotPrecedesEqual,
//         StaticToken::NotPrecedesSlantEqual,
//         StaticToken::NotPrecedesTilde,
//         StaticToken::NotReverseElement,
//         StaticToken::NotSquareSubset,
//         StaticToken::NotSquareSubsetEqual,
//         StaticToken::NotSquareSuperset,
//         StaticToken::NotSquareSupersetEqual,
//         StaticToken::NotSubsetEqual,
//         StaticToken::NotSucceeds,
//         StaticToken::NotSucceedsEqual,
//         StaticToken::NotSucceedsSlantEqual,
//         StaticToken::NotSucceedsTilde,
//         StaticToken::NotSupersetEqual,
//         StaticToken::NotTilde,
//         StaticToken::NotTildeEqual,
//         StaticToken::NotTildeFullEqual,
//         StaticToken::NotTildeTilde,
//         StaticToken::LeftPart,
//         StaticToken::RightPart,
//         StaticToken::LeftPart,
//         StaticToken::RightPart,
//         StaticToken::Precedes,
//         StaticToken::PrecedesEqual,
//         StaticToken::PrecedesSlantEqual,
//         StaticToken::PrecedesTilde,
//         StaticToken::Prefix,
//         StaticToken::Proportion,
//         StaticToken::Proportional,
//         StaticToken::ReverseElement,
//         StaticToken::ReverseEquilibrium,
//         StaticToken::ReverseUpEquilibrium,
//         StaticToken::RightDownTeeVector,
//         StaticToken::RightDownVector,
//         StaticToken::RightDownVectorBar,
//         StaticToken::RightTeeVector,
//         StaticToken::RightUpDownVector,
//         StaticToken::RightUpTeeVector,
//         StaticToken::RightUpVector,
//         StaticToken::RightUpVectorBar,
//         StaticToken::RightVector,
//         StaticToken::RightVectorBar,
//         StaticToken::SquareIntersection,
//         StaticToken::SquareSubset,
//         StaticToken::SquareSubsetEqual,
//         StaticToken::SquareSuperset,
//         StaticToken::SquareSupersetEqual,
//         StaticToken::SquareUnion,
//         StaticToken::SubsetEqual,
//         StaticToken::Minus,
// //        StaticToken::Curl,
//         StaticToken::Degree,
//         StaticToken::DirectedEdge,
//         StaticToken::Distributed,
// //        StaticToken::Div,
//         StaticToken::LeftDoubleBracketingBar,
//         StaticToken::RightDoubleBracketingBar,
// //        StaticToken::BracketingBar,
//         StaticToken::CapitalDifferentialD,
//         StaticToken::DoubleDownArrow,
//         StaticToken::DoubleLeftTee,
//         StaticToken::DoubleRightTee,
//         StaticToken::DoubleUpArrow,
//         StaticToken::DoubleVerticalBar,
//         StaticToken::DownArrow,
//         StaticToken::DownArrowBar,
//         StaticToken::DownLeftRightVector,
//         StaticToken::DownLeftTeeVector,
//         StaticToken::DownLeftVector,
//         StaticToken::DownLeftVectorBar,
//         StaticToken::DownRightTeeVector,
//         StaticToken::DownRightVector,
//         StaticToken::DownRightVectorBar,
//         StaticToken::DownTeeArrow,
//         StaticToken::Equilibrium,
// //        StaticToken::Grad,
//         StaticToken::HumpDownHump,
//         StaticToken::HumpEqual,
//         StaticToken::LeftDownVectorBar,
//         StaticToken::LeftRightVector,
//         StaticToken::LeftTeeVector,
//         StaticToken::LeftTriangle,
//         StaticToken::LeftTriangleBar,
//         StaticToken::LeftTriangleEqual,
//         StaticToken::LeftUpDownVector,
//         StaticToken::LeftUpTeeVector,
//         StaticToken::LeftUpVector,
//         StaticToken::LeftUpVectorBar,
//         StaticToken::LeftVector,
//         StaticToken::LeftVectorBar,
//         StaticToken::NotCongruent,
//         StaticToken::NotRightTriangle,
//         StaticToken::NotRightTriangleBar,
//         StaticToken::NotRightTriangleEqual,
//         StaticToken::RightTriangle,
//         StaticToken::RightTriangleBar,
//         StaticToken::RightTriangleEqual,
//         StaticToken::NotHumpDownHump,
//         StaticToken::NotHumpEqual,
//         StaticToken::NotLeftTriangle,
//         StaticToken::NotLeftTriangleBar,
//         StaticToken::NotLeftTriangleEqual,
//         StaticToken::Congruent,
//         StaticToken::VectorGreater,
//         StaticToken::VectorGreaterEqual,
//         StaticToken::VectorLess,
//         StaticToken::VectorLessEqual,
//         StaticToken::Vee,
//     };
// }

// // arity for "operators" that can appear in the call to the `null`  method
// // of the Pratt parser, i.e. nullary, unary prefix, or brackets
// lazy_static! {
//     pub(crate) static ref NULL_ARITY: HashMap<StaticToken, Arity> = hashmap!{
//         //nullary operators
//         StaticToken::E => Arity::Nullary,
//         StaticToken::I => Arity::Nullary,
//         StaticToken::Pi => Arity::Nullary,
//         StaticToken::Infinity => Arity::Nullary,
//         StaticToken::Span => Arity::Nullary, // TODO: can be both unary and nullary
//         StaticToken::Log => Arity::Nullary,
//         StaticToken::Exp => Arity::Nullary,
//         StaticToken::Sin => Arity::Nullary,
//         StaticToken::Cos => Arity::Nullary,
//         StaticToken::Tan => Arity::Nullary,
//         StaticToken::Sinh => Arity::Nullary,
//         StaticToken::Cosh => Arity::Nullary,
//         StaticToken::Tanh => Arity::Nullary,
//         StaticToken::ArcSin => Arity::Nullary,
//         StaticToken::ArcCos => Arity::Nullary,
//         StaticToken::ArcTan => Arity::Nullary,
//         StaticToken::ArcSinh => Arity::Nullary,
//         StaticToken::ArcCosh => Arity::Nullary,
//         StaticToken::ArcTanh => Arity::Nullary,
//         StaticToken::Sqrt => Arity::Nullary,
//         StaticToken::Subscript => Arity::Nullary,
//         StaticToken::Superscript => Arity::Nullary,

//         // brackets
//         StaticToken::LeftAngleBracket => Arity::Unary,
//         StaticToken::LeftAssociation => Arity::Unary,
//         StaticToken::LeftBracket => Arity::Unary,
//         StaticToken::LeftCeiling => Arity::Unary,
//         StaticToken::LeftFloor => Arity::Unary,
//         StaticToken::LeftList => Arity::Unary,

//         // unary (prefix) operators
//         StaticToken::CapitalDifferentialD => Arity::Unary,
//         StaticToken::Decrement => Arity::Unary,
//         StaticToken::Increment => Arity::Unary,
//         StaticToken::Del => Arity::Unary,
//         StaticToken::Exists => Arity::Unary,
//         StaticToken::ForAll => Arity::Unary,
//         StaticToken::Get => Arity::Unary,
//         StaticToken::MinusPlus => Arity::Unary,
//         StaticToken::Not => Arity::Unary,
//         StaticToken::NotExists => Arity::Unary,
//         StaticToken::Plus => Arity::Unary,
//         StaticToken::PlusMinus => Arity::Unary,
//         StaticToken::Minus => Arity::Unary,
//         StaticToken::MinusPlus => Arity::Unary,
//         StaticToken::Slot => Arity::Unary,
//         StaticToken::SlotSequence => Arity::Unary,
//         //StaticToken::Sqrt => Arity::Unary,
//         StaticToken::Square => Arity::Unary,
//         StaticToken::Transpose => Arity::Unary,
//     };
// }

// // arity for operators that can appear in the call to the `left`  method
// // of the Pratt parser, i.e. unary postfix, binary, or function-like
// lazy_static! {
//     pub(crate) static ref LEFT_ARITY: HashMap<StaticToken, Arity> = hashmap!{
//         StaticToken::LeftPart => Arity::Function,
//         StaticToken::LeftSquareBracket => Arity::Function,

//         StaticToken::Blank => Arity::Unary,
//         StaticToken::BlankNullSequence => Arity::Unary,
//         StaticToken::BlankSequence => Arity::Unary,
//         StaticToken::Conjugate => Arity::Unary,
//         StaticToken::ConjugateTranspose => Arity::Unary,
//         StaticToken::Decrement => Arity::Unary,
//         StaticToken::Degree => Arity::Unary,
//         StaticToken::Function => Arity::Unary,
//         StaticToken::Increment => Arity::Unary,
//         StaticToken::Not => Arity::Unary,
//         StaticToken::DoubleFactorial => Arity::Unary,
//         StaticToken::SuperDagger => Arity::Unary,

//         StaticToken::Pattern => Arity::Binary,
//         StaticToken::TagSet => Arity::Binary,
//         StaticToken::TagSetDelayed => Arity::Binary,
//         StaticToken::TagUnset => Arity::Binary,
//         StaticToken::AddTo => Arity::Binary,
//         StaticToken::Alternatives => Arity::Binary,
//         StaticToken::And => Arity::Binary,
//         StaticToken::Apply => Arity::Binary,
//         StaticToken::Apply1 => Arity::Binary,
//         StaticToken::Backslash => Arity::Binary,
//         StaticToken::Because => Arity::Binary,
//         StaticToken::Cap => Arity::Binary,
//         StaticToken::CenterDot => Arity::Binary,
//         StaticToken::CircleDot => Arity::Binary,
//         StaticToken::CircleMinus => Arity::Binary,
//         StaticToken::CirclePlus => Arity::Binary,
//         StaticToken::CircleTimes => Arity::Binary,
//         StaticToken::Colon => Arity::Binary,
//         StaticToken::Comma => Arity::Binary,
//         StaticToken::Composition => Arity::Binary,
//         StaticToken::CompoundExpression => Arity::Binary,
//         StaticToken::Condition => Arity::Binary,
//         StaticToken::Conditioned => Arity::Binary,
//         StaticToken::Congruent => Arity::Binary,
//         StaticToken::Coproduct => Arity::Binary,
//         StaticToken::Cross => Arity::Binary,
//         StaticToken::Cup => Arity::Binary,
//         StaticToken::CupCap => Arity::Binary,
//         StaticToken::Diamond => Arity::Binary,
//         StaticToken::DifferenceDelta => Arity::Binary,
//         StaticToken::DirectedEdge => Arity::Binary,
//         StaticToken::DiscreteRatio => Arity::Binary,
//         StaticToken::DiscreteShift => Arity::Binary,
//         StaticToken::Distributed => Arity::Binary,
//         StaticToken::Divide => Arity::Binary,
//         StaticToken::DivideBy => Arity::Binary,
//         StaticToken::Dot => Arity::Binary,
//         StaticToken::DotEqual => Arity::Binary,
//         StaticToken::DoubleDownArrow => Arity::Binary,
//         StaticToken::DoubleLeftTee => Arity::Binary,
//         StaticToken::DoubleRightTee => Arity::Binary,
//         StaticToken::DoubleUpArrow => Arity::Binary,
//         StaticToken::DoubleVerticalBar => Arity::Binary,
//         StaticToken::DownArrow => Arity::Binary,
//         StaticToken::DownArrowBar => Arity::Binary,
//         StaticToken::DownLeftRightVector => Arity::Binary,
//         StaticToken::DownLeftTeeVector => Arity::Binary,
//         StaticToken::DownLeftVector => Arity::Binary,
//         StaticToken::DownLeftVectorBar => Arity::Binary,
//         StaticToken::DownRightTeeVector => Arity::Binary,
//         StaticToken::DownRightVector => Arity::Binary,
//         StaticToken::DownRightVectorBar => Arity::Binary,
//         StaticToken::DownTee => Arity::Binary,
//         StaticToken::DownTeeArrow => Arity::Binary,
//         StaticToken::Element => Arity::Binary,
//         StaticToken::Equal => Arity::Binary,
//         StaticToken::EqualTilde => Arity::Binary,
//         StaticToken::Equilibrium => Arity::Binary,
//         StaticToken::Equivalent => Arity::Binary,
//         StaticToken::Greater => Arity::Binary,
//         StaticToken::GreaterEqual => Arity::Binary,
//         StaticToken::GreaterEqualLess => Arity::Binary,
//         StaticToken::GreaterFullEqual => Arity::Binary,
//         StaticToken::GreaterGreater => Arity::Binary,
//         StaticToken::GreaterLess => Arity::Binary,
//         StaticToken::GreaterSlantEqual => Arity::Binary,
//         StaticToken::GreaterTilde => Arity::Binary,
//         StaticToken::HumpDownHump => Arity::Binary,
//         StaticToken::HumpEqual => Arity::Binary,
//         StaticToken::Implies => Arity::Binary,
//         StaticToken::Increment => Arity::Binary,
//         StaticToken::Infix => Arity::Binary,
//         StaticToken::Intersection => Arity::Binary,
//         StaticToken::LeftDownTeeVector => Arity::Binary,
//         StaticToken::LeftDownVector => Arity::Binary,
//         StaticToken::LeftDownVectorBar => Arity::Binary,
//         StaticToken::LeftRightVector => Arity::Binary,
//         StaticToken::LeftTee => Arity::Binary,
//         StaticToken::LeftTeeVector => Arity::Binary,
//         StaticToken::LeftTriangle => Arity::Binary,
//         StaticToken::LeftTriangleBar => Arity::Binary,
//         StaticToken::LeftTriangleEqual => Arity::Binary,
//         StaticToken::LeftUpDownVector => Arity::Binary,
//         StaticToken::LeftUpTeeVector => Arity::Binary,
//         StaticToken::LeftUpVector => Arity::Binary,
//         StaticToken::LeftUpVectorBar => Arity::Binary,
//         StaticToken::LeftVector => Arity::Binary,
//         StaticToken::LeftVectorBar => Arity::Binary,
//         StaticToken::Less => Arity::Binary,
//         StaticToken::LessEqual => Arity::Binary,
//         StaticToken::LessEqualGreater => Arity::Binary,
//         StaticToken::LessFullEqual => Arity::Binary,
//         StaticToken::LessGreater => Arity::Binary,
//         StaticToken::LessLess => Arity::Binary,
//         StaticToken::LessSlantEqual => Arity::Binary,
//         StaticToken::LessTilde => Arity::Binary,
//         StaticToken::Limit => Arity::Binary,
//         StaticToken::LeftList => Arity::Binary,
//         StaticToken::RightList => Arity::Binary,
//         StaticToken::Map => Arity::Binary,
//         StaticToken::MapAll => Arity::Binary,
//         StaticToken::MaxLimit => Arity::Binary,
//         StaticToken::MessageName => Arity::Binary,
//         StaticToken::MinLimit => Arity::Binary,
//         StaticToken::MinusPlus => Arity::Binary,
//         StaticToken::Nand => Arity::Binary,
//         StaticToken::NestedGreaterGreater => Arity::Binary,
//         StaticToken::NestedLessLess => Arity::Binary,
//         StaticToken::NonCommutativeMultiply => Arity::Binary,
//         StaticToken::Nor => Arity::Binary,
//         StaticToken::NotCongruent => Arity::Binary,
//         StaticToken::NotCupCap => Arity::Binary,
//         StaticToken::NotDoubleVerticalBar => Arity::Binary,
//         StaticToken::NotElement => Arity::Binary,
//         StaticToken::NotGreater => Arity::Binary,
//         StaticToken::NotGreaterEqual => Arity::Binary,
//         StaticToken::NotGreaterFullEqual => Arity::Binary,
//         StaticToken::NotGreaterGreater => Arity::Binary,
//         StaticToken::NotGreaterLess => Arity::Binary,
//         StaticToken::NotGreaterSlantEqual => Arity::Binary,
//         StaticToken::NotGreaterTilde => Arity::Binary,
//         StaticToken::NotHumpDownHump => Arity::Binary,
//         StaticToken::NotHumpEqual => Arity::Binary,
//         StaticToken::NotLeftTriangle => Arity::Binary,
//         StaticToken::NotLeftTriangleBar => Arity::Binary,
//         StaticToken::NotLeftTriangleEqual => Arity::Binary,
//         StaticToken::NotLess => Arity::Binary,
//         StaticToken::NotLessEqual => Arity::Binary,
//         StaticToken::NotLessFullEqual => Arity::Binary,
//         StaticToken::NotLessGreater => Arity::Binary,
//         StaticToken::NotLessLess => Arity::Binary,
//         StaticToken::NotLessSlantEqual => Arity::Binary,
//         StaticToken::NotLessTilde => Arity::Binary,
//         StaticToken::NotNestedGreaterGreater => Arity::Binary,
//         StaticToken::NotNestedLessLess => Arity::Binary,
//         StaticToken::NotPrecedes => Arity::Binary,
//         StaticToken::NotPrecedesEqual => Arity::Binary,
//         StaticToken::NotPrecedesSlantEqual => Arity::Binary,
//         StaticToken::NotPrecedesTilde => Arity::Binary,
//         StaticToken::NotReverseElement => Arity::Binary,
//         StaticToken::NotRightTriangle => Arity::Binary,
//         StaticToken::NotRightTriangleBar => Arity::Binary,
//         StaticToken::NotRightTriangleEqual => Arity::Binary,
//         StaticToken::NotSquareSubset => Arity::Binary,
//         StaticToken::NotSquareSubsetEqual => Arity::Binary,
//         StaticToken::NotSquareSuperset => Arity::Binary,
//         StaticToken::NotSquareSupersetEqual => Arity::Binary,
//         StaticToken::NotSubset => Arity::Binary,
//         StaticToken::NotSubsetEqual => Arity::Binary,
//         StaticToken::NotSucceeds => Arity::Binary,
//         StaticToken::NotSucceedsEqual => Arity::Binary,
//         StaticToken::NotSucceedsSlantEqual => Arity::Binary,
//         StaticToken::NotSucceedsTilde => Arity::Binary,
//         StaticToken::NotSuperset => Arity::Binary,
//         StaticToken::NotSupersetEqual => Arity::Binary,
//         StaticToken::NotTilde => Arity::Binary,
//         StaticToken::NotTildeEqual => Arity::Binary,
//         StaticToken::NotTildeFullEqual => Arity::Binary,
//         StaticToken::NotTildeTilde => Arity::Binary,
//         StaticToken::NotVerticalBar => Arity::Binary,
//         StaticToken::Optional => Arity::Binary,
//         StaticToken::Or => Arity::Binary,
//         StaticToken::PatternTest => Arity::Binary,
//         StaticToken::Piecewise => Arity::Binary,
//         StaticToken::Plus => Arity::Binary,
//         StaticToken::PlusMinus => Arity::Binary,
//         StaticToken::Postfix => Arity::Binary,
//         StaticToken::Power => Arity::Binary,
//         StaticToken::Precedes => Arity::Binary,
//         StaticToken::PrecedesEqual => Arity::Binary,
//         StaticToken::PrecedesSlantEqual => Arity::Binary,
//         StaticToken::PrecedesTilde => Arity::Binary,
//         StaticToken::Prefix => Arity::Binary,
//         StaticToken::Proportion => Arity::Binary,
//         StaticToken::Proportional => Arity::Binary,
//         StaticToken::Repeated => Arity::Binary,
//         StaticToken::RepeatedNull => Arity::Binary,
//         StaticToken::ReplaceAll => Arity::Binary,
//         StaticToken::ReplaceRepeated => Arity::Binary,
//         StaticToken::ReverseElement => Arity::Binary,
//         StaticToken::ReverseEquilibrium => Arity::Binary,
//         StaticToken::ReverseUpEquilibrium => Arity::Binary,
//         StaticToken::RightDownTeeVector => Arity::Binary,
//         StaticToken::RightDownVector => Arity::Binary,
//         StaticToken::RightDownVectorBar => Arity::Binary,
//         StaticToken::RightTee => Arity::Binary,
//         StaticToken::RightTeeVector => Arity::Binary,
//         StaticToken::RightTriangle => Arity::Binary,
//         StaticToken::RightTriangleBar => Arity::Binary,
//         StaticToken::RightTriangleEqual => Arity::Binary,
//         StaticToken::RightUpDownVector => Arity::Binary,
//         StaticToken::RightUpTeeVector => Arity::Binary,
//         StaticToken::RightUpVector => Arity::Binary,
//         StaticToken::RightUpVectorBar => Arity::Binary,
//         StaticToken::RightVector => Arity::Binary,
//         StaticToken::RightVectorBar => Arity::Binary,
//         StaticToken::Rule => Arity::Binary,
//         StaticToken::RuleDelayed => Arity::Binary,
//         StaticToken::SameQ => Arity::Binary,
//         StaticToken::Set => Arity::Binary,
//         StaticToken::SetDelayed => Arity::Binary,
//         StaticToken::SmallCircle => Arity::Binary,
//         StaticToken::Span => Arity::Binary, // can also be postfix
//         StaticToken::SquareIntersection => Arity::Binary,
//         StaticToken::SquareSubset => Arity::Binary,
//         StaticToken::SquareSubsetEqual => Arity::Binary,
//         StaticToken::SquareSuperset => Arity::Binary,
//         StaticToken::SquareSupersetEqual => Arity::Binary,
//         StaticToken::SquareUnion => Arity::Binary,
//         StaticToken::Star => Arity::Binary,
//         StaticToken::StringExpression => Arity::Binary,
//         StaticToken::StringJoin => Arity::Binary,
//         StaticToken::Subset => Arity::Binary,
//         StaticToken::SubsetEqual => Arity::Binary,
//         StaticToken::Minus => Arity::Binary,
//         StaticToken::MinusFrom => Arity::Binary,
//         StaticToken::Succeeds => Arity::Binary,
//         StaticToken::SucceedsEqual => Arity::Binary,
//         StaticToken::SucceedsSlantEqual => Arity::Binary,
//         StaticToken::SucceedsTilde => Arity::Binary,
//         StaticToken::SuchThat => Arity::Binary,
//         StaticToken::Superset => Arity::Binary,
//         StaticToken::SupersetEqual => Arity::Binary,
//         // what is this?
//         // StaticToken::Tag => Arity::Binary,
//         StaticToken::Therefore => Arity::Binary,
//         StaticToken::Tilde => Arity::Binary,
//         StaticToken::TildeEqual => Arity::Binary,
//         StaticToken::TildeFullEqual => Arity::Binary,
//         StaticToken::TildeTilde => Arity::Binary,
//         StaticToken::Times => Arity::Binary,
//         StaticToken::TimesBy => Arity::Binary,
//         StaticToken::TwoWayRule => Arity::Binary,
//         StaticToken::UndirectedEdge => Arity::Binary,
//         StaticToken::Unequal => Arity::Binary,
//         StaticToken::Union => Arity::Binary,
//         StaticToken::UnionPlus => Arity::Binary,
//         StaticToken::UnsameQ => Arity::Binary,
//         StaticToken::Unset => Arity::Binary,
//         StaticToken::UpArrow => Arity::Binary,
//         StaticToken::UpArrowBar => Arity::Binary,
//         StaticToken::UpEquilibrium => Arity::Binary,
//         StaticToken::UpTee => Arity::Binary,
//         StaticToken::VectorGreater => Arity::Binary,
//         StaticToken::VectorGreaterEqual => Arity::Binary,
//         StaticToken::VectorLess => Arity::Binary,
//         StaticToken::VectorLessEqual => Arity::Binary,
//         StaticToken::Vee => Arity::Binary,
//         StaticToken::VerticalBar => Arity::Binary,
//         StaticToken::VerticalSeparator => Arity::Binary,
//         StaticToken::VerticalTilde => Arity::Binary,
//         StaticToken::Wedge => Arity::Binary,
//         StaticToken::Xnor => Arity::Binary,
//         StaticToken::Xor => Arity::Binary,
//     };
// }

// lazy_static! {
//     pub(crate) static ref CLOSING_BRACKET: HashMap<StaticToken, StaticToken> = hashmap!{
//         StaticToken::LeftAngleBracket  => StaticToken::RightAngleBracket,
//         StaticToken::LeftAssociation   => StaticToken::RightAssociation,
//         StaticToken::LeftBracket       => StaticToken::RightBracket,
//         StaticToken::LeftCeiling       => StaticToken::RightCeiling,
//         StaticToken::LeftFloor         => StaticToken::RightFloor,
//         StaticToken::LeftSquareBracket => StaticToken::RightSquareBracket,
//         StaticToken::LeftPart          => StaticToken::RightPart,
//         StaticToken::LeftList          => StaticToken::RightList,
//         StaticToken::LeftTee           => StaticToken::RightTee,
//     };
// }

// lazy_static! {
//     pub(crate) static ref TOKEN_EXPRESSION: HashMap<StaticToken, NullaryOp<'static>> = hashmap!{
//         StaticToken::E => NullaryOp::E,
//         StaticToken::I => NullaryOp::I,
//         StaticToken::Pi => NullaryOp::Pi,
//         StaticToken::Infinity => NullaryOp::Infinity,
//         StaticToken::Log => NullaryOp::Log,
//         StaticToken::Exp => NullaryOp::Exp,
//         StaticToken::Sin => NullaryOp::Sin,
//         StaticToken::Cos => NullaryOp::Cos,
//         StaticToken::Tan => NullaryOp::Tan,
//         StaticToken::Sinh => NullaryOp::Sinh,
//         StaticToken::Cosh => NullaryOp::Cosh,
//         StaticToken::Tanh => NullaryOp::Tanh,
//         StaticToken::ArcSin => NullaryOp::ASin,
//         StaticToken::ArcCos => NullaryOp::ACos,
//         StaticToken::ArcTan => NullaryOp::ATan,
//         StaticToken::ArcSinh => NullaryOp::ASinh,
//         StaticToken::ArcCosh => NullaryOp::ACosh,
//         StaticToken::ArcTanh => NullaryOp::ATanh,
//         StaticToken::Sqrt => NullaryOp::Sqrt,
//         StaticToken::Subscript => NullaryOp::Subscript,
//         StaticToken::Superscript => NullaryOp::Superscript,
//     };
// }

// lazy_static! {
//     pub(crate) static ref PREFIX_OP_TO_EXPR: HashMap<StaticToken, UnaryOp> = hashmap!{
//         StaticToken::Decrement => UnaryOp::PrefixDecrement,
//         StaticToken::Increment => UnaryOp::PrefixIncrement,
//         StaticToken::Del => UnaryOp::Del,
//         StaticToken::Exists => UnaryOp::Exists,
//         StaticToken::ForAll => UnaryOp::ForAll,
//         StaticToken::Get => UnaryOp::Get,
//         StaticToken::MinusPlus => UnaryOp::UMinusPlus,
//         StaticToken::Not => UnaryOp::Not,
//         StaticToken::NotExists => UnaryOp::NotExists,
//         StaticToken::Plus => UnaryOp::UPlus,
//         StaticToken::PlusMinus => UnaryOp::UPlusMinus,
//         StaticToken::Minus => UnaryOp::UMinus,
//         StaticToken::MinusPlus => UnaryOp::UMinusPlus,
//         StaticToken::Slot => UnaryOp::Slot,
//         StaticToken::SlotSequence => UnaryOp::SlotSequence,
//         StaticToken::Square => UnaryOp::Square,
//         StaticToken::Transpose => UnaryOp::Transpose,
//     };
// }

// lazy_static! {
//     pub(crate) static ref POSTFIX_OP_TO_EXPR: HashMap<StaticToken, UnaryOp> = hashmap!{
//         StaticToken::Blank => UnaryOp::Wildcard,
//         StaticToken::BlankNullSequence => UnaryOp::Many0Wildcard,
//         StaticToken::BlankSequence => UnaryOp::ManyWildcard,
//         StaticToken::Conjugate => UnaryOp::Conjugate,
//         StaticToken::ConjugateTranspose => UnaryOp::ConjugateTranspose,
//         StaticToken::Decrement => UnaryOp::PostfixDecrement,
//         StaticToken::Degree => UnaryOp::Degree,
//         StaticToken::Function => UnaryOp::PureFunction,
//         StaticToken::Increment => UnaryOp::PostfixIncrement,
//         StaticToken::Not => UnaryOp::Factorial,
//         StaticToken::DoubleFactorial => UnaryOp::DoubleFactorial,
//         StaticToken::SuperDagger => UnaryOp::SuperDagger,
//     };
// }

// lazy_static! {
//     pub(crate) static ref BINARY_OP_TO_EXPR: HashMap<StaticToken, BinaryOp> = hashmap!{
//         StaticToken::Pattern => BinaryOp::Pattern,
//         StaticToken::TagSet => BinaryOp::TagSet,
//         StaticToken::TagSetDelayed => BinaryOp::TagSetDelayed,
//         StaticToken::TagUnset => BinaryOp::TagUnset,
//         StaticToken::AddTo => BinaryOp::AddTo,
//         StaticToken::Alternatives => BinaryOp::Alternatives,
//         StaticToken::And => BinaryOp::And,
//         StaticToken::Apply => BinaryOp::Apply,
//         StaticToken::Apply1 => BinaryOp::Apply1,
//         StaticToken::Backslash => BinaryOp::Backslash,
//         StaticToken::Because => BinaryOp::Because,
//         StaticToken::Cap => BinaryOp::Cap,
//         StaticToken::CenterDot => BinaryOp::CenterDot,
//         StaticToken::CircleDot => BinaryOp::CircleDot,
//         StaticToken::CircleMinus => BinaryOp::CircleMinus,
//         StaticToken::CirclePlus => BinaryOp::CirclePlus,
//         StaticToken::CircleTimes => BinaryOp::CircleTimes,
//         StaticToken::Colon => BinaryOp::Colon,
//         StaticToken::Comma => BinaryOp::Sequence,
//         StaticToken::Composition => BinaryOp::Composition,
//         StaticToken::CompoundExpression => BinaryOp::Compound,
//         StaticToken::Condition => BinaryOp::Condition,
//         StaticToken::Conditioned => BinaryOp::Conditioned,
//         StaticToken::Congruent => BinaryOp::Congruent,
//         StaticToken::Coproduct => BinaryOp::Coproduct,
//         StaticToken::Cross => BinaryOp::Cross,
//         StaticToken::Cup => BinaryOp::Cup,
//         StaticToken::CupCap => BinaryOp::CupCap,
//         StaticToken::Diamond => BinaryOp::Diamond,
//         StaticToken::DifferenceDelta => BinaryOp::DifferenceDelta,
//         StaticToken::DirectedEdge => BinaryOp::DirectedEdge,
//         StaticToken::DiscreteRatio => BinaryOp::DiscreteRatio,
//         StaticToken::DiscreteShift => BinaryOp::DiscreteShift,
//         StaticToken::Distributed => BinaryOp::Distributed,
//         StaticToken::Divide => BinaryOp::Divide,
//         StaticToken::DivideBy => BinaryOp::DivideBy,
//         StaticToken::Dot => BinaryOp::Dot,
//         StaticToken::DotEqual => BinaryOp::DotEqual,
//         StaticToken::DoubleDownArrow => BinaryOp::DoubleDownArrow,
//         StaticToken::DoubleLeftTee => BinaryOp::DoubleLeftTee,
//         StaticToken::DoubleRightTee => BinaryOp::DoubleRightTee,
//         StaticToken::DoubleUpArrow => BinaryOp::DoubleUpArrow,
//         StaticToken::DoubleVerticalBar => BinaryOp::DoubleVerticalBar,
//         StaticToken::DownArrow => BinaryOp::DownArrow,
//         StaticToken::DownArrowBar => BinaryOp::DownArrowBar,
//         StaticToken::DownLeftRightVector => BinaryOp::DownLeftRightVector,
//         StaticToken::DownLeftTeeVector => BinaryOp::DownLeftTeeVector,
//         StaticToken::DownLeftVector => BinaryOp::DownLeftVector,
//         StaticToken::DownLeftVectorBar => BinaryOp::DownLeftVectorBar,
//         StaticToken::DownRightTeeVector => BinaryOp::DownRightTeeVector,
//         StaticToken::DownRightVector => BinaryOp::DownRightVector,
//         StaticToken::DownRightVectorBar => BinaryOp::DownRightVectorBar,
//         StaticToken::DownTee => BinaryOp::DownTee,
//         StaticToken::DownTeeArrow => BinaryOp::DownTeeArrow,
//         StaticToken::Element => BinaryOp::Element,
//         StaticToken::Equal => BinaryOp::Equal,
//         StaticToken::EqualTilde => BinaryOp::EqualTilde,
//         StaticToken::Equilibrium => BinaryOp::Equilibrium,
//         StaticToken::Equivalent => BinaryOp::Equivalent,
//         StaticToken::Greater => BinaryOp::Greater,
//         StaticToken::GreaterEqual => BinaryOp::GreaterEqual,
//         StaticToken::GreaterEqualLess => BinaryOp::GreaterEqualLess,
//         StaticToken::GreaterFullEqual => BinaryOp::GreaterFullEqual,
//         StaticToken::GreaterGreater => BinaryOp::GreaterGreater,
//         StaticToken::GreaterLess => BinaryOp::GreaterLess,
//         StaticToken::GreaterSlantEqual => BinaryOp::GreaterSlantEqual,
//         StaticToken::GreaterTilde => BinaryOp::GreaterTilde,
//         StaticToken::HumpDownHump => BinaryOp::HumpDownHump,
//         StaticToken::HumpEqual => BinaryOp::HumpEqual,
//         StaticToken::Implies => BinaryOp::Implies,
//         StaticToken::Increment => BinaryOp::Increment,
//         StaticToken::Infix => BinaryOp::Infix,
//         StaticToken::Intersection => BinaryOp::Intersection,
//         StaticToken::LeftDownTeeVector => BinaryOp::LeftDownTeeVector,
//         StaticToken::LeftDownVector => BinaryOp::LeftDownVector,
//         StaticToken::LeftDownVectorBar => BinaryOp::LeftDownVectorBar,
//         StaticToken::LeftRightVector => BinaryOp::LeftRightVector,
//         StaticToken::LeftTee => BinaryOp::LeftTee,
//         StaticToken::LeftTeeVector => BinaryOp::LeftTeeVector,
//         StaticToken::LeftTriangle => BinaryOp::LeftTriangle,
//         StaticToken::LeftTriangleBar => BinaryOp::LeftTriangleBar,
//         StaticToken::LeftTriangleEqual => BinaryOp::LeftTriangleEqual,
//         StaticToken::LeftUpDownVector => BinaryOp::LeftUpDownVector,
//         StaticToken::LeftUpTeeVector => BinaryOp::LeftUpTeeVector,
//         StaticToken::LeftUpVector => BinaryOp::LeftUpVector,
//         StaticToken::LeftUpVectorBar => BinaryOp::LeftUpVectorBar,
//         StaticToken::LeftVector => BinaryOp::LeftVector,
//         StaticToken::LeftVectorBar => BinaryOp::LeftVectorBar,
//         StaticToken::Less => BinaryOp::Less,
//         StaticToken::LessEqual => BinaryOp::LessEqual,
//         StaticToken::LessEqualGreater => BinaryOp::LessEqualGreater,
//         StaticToken::LessFullEqual => BinaryOp::LessFullEqual,
//         StaticToken::LessGreater => BinaryOp::LessGreater,
//         StaticToken::LessLess => BinaryOp::LessLess,
//         StaticToken::LessSlantEqual => BinaryOp::LessSlantEqual,
//         StaticToken::LessTilde => BinaryOp::LessTilde,
//         StaticToken::Limit => BinaryOp::Limit,
//         StaticToken::LeftList => BinaryOp::LeftList,
//         StaticToken::RightList => BinaryOp::RightList,
//         StaticToken::Map => BinaryOp::Map,
//         StaticToken::MapAll => BinaryOp::MapAll,
//         StaticToken::MaxLimit => BinaryOp::MaxLimit,
//         StaticToken::MessageName => BinaryOp::MessageName,
//         StaticToken::MinLimit => BinaryOp::MinLimit,
//         StaticToken::MinusPlus => BinaryOp::MinusPlus,
//         StaticToken::Nand => BinaryOp::Nand,
//         StaticToken::NestedGreaterGreater => BinaryOp::NestedGreaterGreater,
//         StaticToken::NestedLessLess => BinaryOp::NestedLessLess,
//         StaticToken::NonCommutativeMultiply => BinaryOp::NonCommutativeMultiply,
//         StaticToken::Nor => BinaryOp::Nor,
//         StaticToken::NotCongruent => BinaryOp::NotCongruent,
//         StaticToken::NotCupCap => BinaryOp::NotCupCap,
//         StaticToken::NotDoubleVerticalBar => BinaryOp::NotDoubleVerticalBar,
//         StaticToken::NotElement => BinaryOp::NotElement,
//         StaticToken::NotGreater => BinaryOp::NotGreater,
//         StaticToken::NotGreaterEqual => BinaryOp::NotGreaterEqual,
//         StaticToken::NotGreaterFullEqual => BinaryOp::NotGreaterFullEqual,
//         StaticToken::NotGreaterGreater => BinaryOp::NotGreaterGreater,
//         StaticToken::NotGreaterLess => BinaryOp::NotGreaterLess,
//         StaticToken::NotGreaterSlantEqual => BinaryOp::NotGreaterSlantEqual,
//         StaticToken::NotGreaterTilde => BinaryOp::NotGreaterTilde,
//         StaticToken::NotHumpDownHump => BinaryOp::NotHumpDownHump,
//         StaticToken::NotHumpEqual => BinaryOp::NotHumpEqual,
//         StaticToken::NotLeftTriangle => BinaryOp::NotLeftTriangle,
//         StaticToken::NotLeftTriangleBar => BinaryOp::NotLeftTriangleBar,
//         StaticToken::NotLeftTriangleEqual => BinaryOp::NotLeftTriangleEqual,
//         StaticToken::NotLess => BinaryOp::NotLess,
//         StaticToken::NotLessEqual => BinaryOp::NotLessEqual,
//         StaticToken::NotLessFullEqual => BinaryOp::NotLessFullEqual,
//         StaticToken::NotLessGreater => BinaryOp::NotLessGreater,
//         StaticToken::NotLessLess => BinaryOp::NotLessLess,
//         StaticToken::NotLessSlantEqual => BinaryOp::NotLessSlantEqual,
//         StaticToken::NotLessTilde => BinaryOp::NotLessTilde,
//         StaticToken::NotNestedGreaterGreater => BinaryOp::NotNestedGreaterGreater,
//         StaticToken::NotNestedLessLess => BinaryOp::NotNestedLessLess,
//         StaticToken::NotPrecedes => BinaryOp::NotPrecedes,
//         StaticToken::NotPrecedesEqual => BinaryOp::NotPrecedesEqual,
//         StaticToken::NotPrecedesSlantEqual => BinaryOp::NotPrecedesSlantEqual,
//         StaticToken::NotPrecedesTilde => BinaryOp::NotPrecedesTilde,
//         StaticToken::NotReverseElement => BinaryOp::NotReverseElement,
//         StaticToken::NotRightTriangle => BinaryOp::NotRightTriangle,
//         StaticToken::NotRightTriangleBar => BinaryOp::NotRightTriangleBar,
//         StaticToken::NotRightTriangleEqual => BinaryOp::NotRightTriangleEqual,
//         StaticToken::NotSquareSubset => BinaryOp::NotSquareSubset,
//         StaticToken::NotSquareSubsetEqual => BinaryOp::NotSquareSubsetEqual,
//         StaticToken::NotSquareSuperset => BinaryOp::NotSquareSuperset,
//         StaticToken::NotSquareSupersetEqual => BinaryOp::NotSquareSupersetEqual,
//         StaticToken::NotSubset => BinaryOp::NotSubset,
//         StaticToken::NotSubsetEqual => BinaryOp::NotSubsetEqual,
//         StaticToken::NotSucceeds => BinaryOp::NotSucceeds,
//         StaticToken::NotSucceedsEqual => BinaryOp::NotSucceedsEqual,
//         StaticToken::NotSucceedsSlantEqual => BinaryOp::NotSucceedsSlantEqual,
//         StaticToken::NotSucceedsTilde => BinaryOp::NotSucceedsTilde,
//         StaticToken::NotSuperset => BinaryOp::NotSuperset,
//         StaticToken::NotSupersetEqual => BinaryOp::NotSupersetEqual,
//         StaticToken::NotTilde => BinaryOp::NotTilde,
//         StaticToken::NotTildeEqual => BinaryOp::NotTildeEqual,
//         StaticToken::NotTildeFullEqual => BinaryOp::NotTildeFullEqual,
//         StaticToken::NotTildeTilde => BinaryOp::NotTildeTilde,
//         StaticToken::NotVerticalBar => BinaryOp::NotVerticalBar,
//         StaticToken::Optional => BinaryOp::Optional,
//         StaticToken::Or => BinaryOp::Or,
//         StaticToken::PatternTest => BinaryOp::PatternTest,
//         StaticToken::Piecewise => BinaryOp::Piecewise,
//         StaticToken::Plus => BinaryOp::Plus,
//         StaticToken::PlusMinus => BinaryOp::PlusMinus,
//         StaticToken::Postfix => BinaryOp::Postfix,
//         StaticToken::Power => BinaryOp::Power,
//         StaticToken::Precedes => BinaryOp::Precedes,
//         StaticToken::PrecedesEqual => BinaryOp::PrecedesEqual,
//         StaticToken::PrecedesSlantEqual => BinaryOp::PrecedesSlantEqual,
//         StaticToken::PrecedesTilde => BinaryOp::PrecedesTilde,
//         StaticToken::Prefix => BinaryOp::Prefix,
//         StaticToken::Proportion => BinaryOp::Proportion,
//         StaticToken::Proportional => BinaryOp::Proportional,
//         StaticToken::Repeated => BinaryOp::Repeated,
//         StaticToken::RepeatedNull => BinaryOp::RepeatedNull,
//         StaticToken::ReplaceAll => BinaryOp::ReplaceAll,
//         StaticToken::ReplaceRepeated => BinaryOp::ReplaceRepeated,
//         StaticToken::ReverseElement => BinaryOp::ReverseElement,
//         StaticToken::ReverseEquilibrium => BinaryOp::ReverseEquilibrium,
//         StaticToken::ReverseUpEquilibrium => BinaryOp::ReverseUpEquilibrium,
//         StaticToken::RightDownTeeVector => BinaryOp::RightDownTeeVector,
//         StaticToken::RightDownVector => BinaryOp::RightDownVector,
//         StaticToken::RightDownVectorBar => BinaryOp::RightDownVectorBar,
//         StaticToken::RightTee => BinaryOp::RightTee,
//         StaticToken::RightTeeVector => BinaryOp::RightTeeVector,
//         StaticToken::RightTriangle => BinaryOp::RightTriangle,
//         StaticToken::RightTriangleBar => BinaryOp::RightTriangleBar,
//         StaticToken::RightTriangleEqual => BinaryOp::RightTriangleEqual,
//         StaticToken::RightUpDownVector => BinaryOp::RightUpDownVector,
//         StaticToken::RightUpTeeVector => BinaryOp::RightUpTeeVector,
//         StaticToken::RightUpVector => BinaryOp::RightUpVector,
//         StaticToken::RightUpVectorBar => BinaryOp::RightUpVectorBar,
//         StaticToken::RightVector => BinaryOp::RightVector,
//         StaticToken::RightVectorBar => BinaryOp::RightVectorBar,
//         StaticToken::Rule => BinaryOp::Rule,
//         StaticToken::RuleDelayed => BinaryOp::RuleDelayed,
//         StaticToken::SameQ => BinaryOp::SameQ,
//         StaticToken::Set => BinaryOp::Equals,
//         StaticToken::SetDelayed => BinaryOp::SetDelayed,
//         StaticToken::SmallCircle => BinaryOp::SmallCircle,
//         StaticToken::Span => BinaryOp::Span,
//         StaticToken::SquareIntersection => BinaryOp::SquareIntersection,
//         StaticToken::SquareSubset => BinaryOp::SquareSubset,
//         StaticToken::SquareSubsetEqual => BinaryOp::SquareSubsetEqual,
//         StaticToken::SquareSuperset => BinaryOp::SquareSuperset,
//         StaticToken::SquareSupersetEqual => BinaryOp::SquareSupersetEqual,
//         StaticToken::SquareUnion => BinaryOp::SquareUnion,
//         StaticToken::Star => BinaryOp::Star,
//         StaticToken::StringExpression => BinaryOp::StringExpression,
//         StaticToken::StringJoin => BinaryOp::StringJoin,
//         StaticToken::Subset => BinaryOp::Subset,
//         StaticToken::SubsetEqual => BinaryOp::SubsetEqual,
//         StaticToken::Minus => BinaryOp::Minus,
//         StaticToken::SubtractFrom => BinaryOp::SubtractFrom,
//         StaticToken::Succeeds => BinaryOp::Succeeds,
//         StaticToken::SucceedsEqual => BinaryOp::SucceedsEqual,
//         StaticToken::SucceedsSlantEqual => BinaryOp::SucceedsSlantEqual,
//         StaticToken::SucceedsTilde => BinaryOp::SucceedsTilde,
//         StaticToken::SuchThat => BinaryOp::SuchThat,
//         StaticToken::Superset => BinaryOp::Superset,
//         StaticToken::SupersetEqual => BinaryOp::SupersetEqual,
//         StaticToken::Therefore => BinaryOp::Therefore,
//         StaticToken::Tilde => BinaryOp::Tilde,
//         StaticToken::TildeEqual => BinaryOp::TildeEqual,
//         StaticToken::TildeFullEqual => BinaryOp::TildeFullEqual,
//         StaticToken::TildeTilde => BinaryOp::TildeTilde,
//         StaticToken::Times => BinaryOp::Times,
//         StaticToken::TimesBy => BinaryOp::TimesBy,
//         StaticToken::TwoWayRule => BinaryOp::TwoWayRule,
//         StaticToken::UndirectedEdge => BinaryOp::UndirectedEdge,
//         StaticToken::Unequal => BinaryOp::Unequal,
//         StaticToken::Union => BinaryOp::Union,
//         StaticToken::UnionPlus => BinaryOp::UnionPlus,
//         StaticToken::UnsameQ => BinaryOp::UnsameQ,
//         StaticToken::Unset => BinaryOp::Unset,
//         StaticToken::UpArrow => BinaryOp::UpArrow,
//         StaticToken::UpArrowBar => BinaryOp::UpArrowBar,
//         StaticToken::UpEquilibrium => BinaryOp::UpEquilibrium,
//         StaticToken::UpTee => BinaryOp::UpTee,
//         StaticToken::VectorGreater => BinaryOp::VectorGreater,
//         StaticToken::VectorGreaterEqual => BinaryOp::VectorGreaterEqual,
//         StaticToken::VectorLess => BinaryOp::VectorLess,
//         StaticToken::VectorLessEqual => BinaryOp::VectorLessEqual,
//         StaticToken::Vee => BinaryOp::Vee,
//         StaticToken::VerticalBar => BinaryOp::VerticalBar,
//         StaticToken::VerticalSeparator => BinaryOp::VerticalSeparator,
//         StaticToken::VerticalTilde => BinaryOp::VerticalTilde,
//         StaticToken::Wedge => BinaryOp::Wedge,
//         StaticToken::Xnor => BinaryOp::Xnor,
//         StaticToken::Xor => BinaryOp::Xor,
//     };
// }
