use super::grammar::*;

use crate::arity::Arity;
use crate::expression::Expression;

use std::collections::{HashMap, HashSet};

#[derive(Copy,Clone,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub(crate) enum Token<'a> {
    Symbol(&'a [u8]),
    Integer(&'a [u8]),
    Real(&'a [u8]),
    String(&'a [u8]),
    Static(StaticToken),
}

#[derive(Copy,Clone,Eq,PartialEq,Ord,PartialOrd,Hash,Debug)]
pub(crate) enum StaticToken {
    Pattern,
    TagSet,
    TagSetDelayed,
    TagUnset,
    Sum,
    D,
    I,
    E,
    Pi,
    Product,
    AddTo,
    Alternatives,
    And,
    LeftAngleBracket,
    RightAngleBracket,
    Apply,
    Apply1,
    LeftAssociation,
    RightAssociation,
    Backslash,
    Because,
    Blank,
    BlankNullSequence,
    BlankSequence,
    LeftBracket,
    RightBracket,
    Cap,
    CapitalDifferentialD,
    LeftCeiling,
    RightCeiling,
    CenterDot,
    CircleDot,
    CircleMinus,
    CirclePlus,
    CircleTimes,
    Colon,
    Comma,
    Composition,
    CompoundExpression,
    Condition,
    Conditioned,
    Congruent,
    Conjugate,
    ConjugateTranspose,
    ContinuedFractionK,
    Coproduct,
    Cross,
    Cup,
    CupCap,
    Decrement,
    Degree,
    Del,
    Diamond,
    DifferenceDelta,
    DirectedEdge,
    DiscreteRatio,
    DiscreteShift,
    Distributed,
    Divide,
    DivideBy,
    Dot,
    DotEqual,
    LeftDoubleBracketingBar,
    RightDoubleBracketingBar,
    DoubleDownArrow,
    DoubleLeftTee,
    DoubleRightTee,
    DoubleUpArrow,
    DoubleVerticalBar,
    DownArrow,
    DownArrowBar,
    DownLeftRightVector,
    DownLeftTeeVector,
    DownLeftVector,
    DownLeftVectorBar,
    DownRightTeeVector,
    DownRightVector,
    DownRightVectorBar,
    DownTee,
    DownTeeArrow,
    Element,
    Equal,
    EqualTilde,
    Equilibrium,
    Equivalent,
    Exists,
    LeftFloor,
    RightFloor,
    ForAll,
    Function,
    Get,
    Greater,
    GreaterEqual,
    GreaterEqualLess,
    GreaterFullEqual,
    GreaterGreater,
    GreaterLess,
    GreaterSlantEqual,
    GreaterTilde,
    HumpDownHump,
    HumpEqual,
    Implies,
    Increment,
    Infinity,
    Infix,
    Integrate,
    IntegralMeasure,
    Intersection,
    LeftDownTeeVector,
    LeftDownVector,
    LeftDownVectorBar,
    LeftRightVector,
    LeftTee,
    LeftTeeVector,
    LeftTriangle,
    LeftTriangleBar,
    LeftTriangleEqual,
    LeftUpDownVector,
    LeftUpTeeVector,
    LeftUpVector,
    LeftUpVectorBar,
    LeftVector,
    LeftVectorBar,
    Less,
    LessEqual,
    LessEqualGreater,
    LessFullEqual,
    LessGreater,
    LessLess,
    LessSlantEqual,
    LessTilde,
    Limit,
    LeftList,
    RightList,
    Map,
    MapAll,
    MaxLimit,
    MessageName,
    MinLimit,
    MinusPlus,
    Nand,
    NestedGreaterGreater,
    NestedLessLess,
    NonCommutativeMultiply,
    Nor,
    Not,
    NotCongruent,
    NotCupCap,
    NotDoubleVerticalBar,
    NotElement,
    NotExists,
    NotGreater,
    NotGreaterEqual,
    NotGreaterFullEqual,
    NotGreaterGreater,
    NotGreaterLess,
    NotGreaterSlantEqual,
    NotGreaterTilde,
    NotHumpDownHump,
    NotHumpEqual,
    NotLeftTriangle,
    NotLeftTriangleBar,
    NotLeftTriangleEqual,
    NotLess,
    NotLessEqual,
    NotLessFullEqual,
    NotLessGreater,
    NotLessLess,
    NotLessSlantEqual,
    NotLessTilde,
    NotNestedGreaterGreater,
    NotNestedLessLess,
    NotPrecedes,
    NotPrecedesEqual,
    NotPrecedesSlantEqual,
    NotPrecedesTilde,
    NotReverseElement,
    NotRightTriangle,
    NotRightTriangleBar,
    NotRightTriangleEqual,
    NotSquareSubset,
    NotSquareSubsetEqual,
    NotSquareSuperset,
    NotSquareSupersetEqual,
    NotSubset,
    NotSubsetEqual,
    NotSucceeds,
    NotSucceedsEqual,
    NotSucceedsSlantEqual,
    NotSucceedsTilde,
    NotSuperset,
    NotSupersetEqual,
    NotTilde,
    NotTildeEqual,
    NotTildeFullEqual,
    NotTildeTilde,
    NotVerticalBar,
    Optional,
    Or,
    Out,
    LeftPart,
    RightPart,
    PatternTest,
    Piecewise,
    Plus,
    PlusMinus,
    Postfix,
    Power,
    Precedes,
    PrecedesEqual,
    PrecedesSlantEqual,
    PrecedesTilde,
    Prefix,
    Proportion,
    Proportional,
    Repeated,
    RepeatedNull,
    ReplaceAll,
    ReplaceRepeated,
    ReverseElement,
    ReverseEquilibrium,
    ReverseUpEquilibrium,
    RightDownTeeVector,
    RightDownVector,
    RightDownVectorBar,
    RightTee,
    RightTeeVector,
    RightTriangle,
    RightTriangleBar,
    RightTriangleEqual,
    RightUpDownVector,
    RightUpTeeVector,
    RightUpVector,
    RightUpVectorBar,
    RightVector,
    RightVectorBar,
    Rule,
    RuleDelayed,
    SameQ,
    Set,
    SetDelayed,
    Slot,
    SlotSequence,
    SmallCircle,
    Span,
    Sqrt,
    Square,
    LeftSquareBracket,
    RightSquareBracket,
    SquareIntersection,
    SquareSubset,
    SquareSubsetEqual,
    SquareSuperset,
    SquareSupersetEqual,
    SquareUnion,
    Star,
    StringExpression,
    StringJoin,
    Subset,
    SubsetEqual,
    Subtract,
    SubtractFrom,
    Succeeds,
    SucceedsEqual,
    SucceedsSlantEqual,
    SucceedsTilde,
    SuchThat,
    SuperDagger,
    Superset,
    SupersetEqual,
    Tag,
    Therefore,
    Tilde,
    TildeEqual,
    TildeFullEqual,
    TildeTilde,
    Times,
    TimesBy,
    Transpose,
    TwoWayRule,
    UndirectedEdge,
    Unequal,
    Union,
    UnionPlus,
    UnsameQ,
    Unset,
    UpArrow,
    UpArrowBar,
    UpEquilibrium,
    UpTee,
    VectorGreater,
    VectorGreaterEqual,
    VectorLess,
    VectorLessEqual,
    Vee,
    VerticalBar,
    VerticalSeparator,
    VerticalTilde,
    Wedge,
    Xnor,
    Xor,
}

// STR_TO_TOKEN.keys().map(|k| k.chars().count()).max().unwrap();
pub(crate) const MAX_TOKEN_STR_LEN: usize = 3;

// obtained from Mathematica 12.0:
//
// ```Mathematica
// Select[
//     WolframLanguageData[
//         WolframLanguageData["Entities"],
//         {"Name", "ShortNotations"}
//     ],
//     #[[2]] =!= Missing["NotApplicable"] &
// ]
// ```
// see https://www.robertjacobson.dev/defining-the-wolfram-language-part-1-finding-operators
// some frequent ascii tokens added by hand
pub(crate) const STR_TO_TOKEN: phf::Map<&'static str, StaticToken> = phf_map!{
    "+=" => StaticToken::AddTo,
    "|" => StaticToken::Alternatives,
    "&&" => StaticToken::And,
    "∧" => StaticToken::And,
    "〈" => StaticToken::LeftAngleBracket,
    "〉" => StaticToken::RightAngleBracket,
    "@@" => StaticToken::Apply,
    "@@@" => StaticToken::Apply1,
    "" => StaticToken::LeftAssociation,
    "" => StaticToken::RightAssociation,
    "∖" => StaticToken::Backslash,
    "∵" => StaticToken::Because,
    "_" => StaticToken::Blank,
    "___" => StaticToken::BlankNullSequence,
    "__" => StaticToken::BlankSequence,
    "(" => StaticToken::LeftBracket,
    ")" => StaticToken::RightBracket,
    //"" => StaticToken::BracketingBar,
    "⌢" => StaticToken::Cap,
    "" => StaticToken::CapitalDifferentialD,
    "⌈" => StaticToken::LeftCeiling,
    "⌉" => StaticToken::RightCeiling,
    "·" => StaticToken::CenterDot,
    "⊙" => StaticToken::CircleDot,
    "⊖" => StaticToken::CircleMinus,
    "⊕" => StaticToken::CirclePlus,
    "⊗" => StaticToken::CircleTimes,
    "∶" => StaticToken::Colon,
    "," => StaticToken::Comma,
    "@*" => StaticToken::Composition,
    ";" => StaticToken::CompoundExpression,
    "/;" => StaticToken::Condition,
    "" => StaticToken::Conditioned,
    "≡" => StaticToken::Congruent,
    "" => StaticToken::Conjugate,
    "" => StaticToken::ConjugateTranspose,
    "" => StaticToken::ConjugateTranspose,
    "" => StaticToken::ContinuedFractionK,
    "∐" => StaticToken::Coproduct,
    "" => StaticToken::Cross,
    //"∖[CubeRoot]" => StaticToken::CubeRoot,
    "⌣" => StaticToken::Cup,
    "≍" => StaticToken::CupCap,
    //"∇_" => StaticToken::Curl,
    //"∂_" => StaticToken::D,
    "--" => StaticToken::Decrement,
    "°" => StaticToken::Degree,
    "∇" => StaticToken::Del,
    "⋄" => StaticToken::Diamond,
    "" => StaticToken::DifferenceDelta,
    "" => StaticToken::DirectedEdge,
    "" => StaticToken::DiscreteRatio,
    "" => StaticToken::DiscreteShift,
    "" => StaticToken::Distributed,
    //"∇….…" => StaticToken::Div,
    "/" => StaticToken::Divide,
    "÷" => StaticToken::Divide,
    "/=" => StaticToken::DivideBy,
    "." => StaticToken::Dot,
    "≐" => StaticToken::DotEqual,
    "" => StaticToken::LeftDoubleBracketingBar,
    "" => StaticToken::RightDoubleBracketingBar,
    "⇓" => StaticToken::DoubleDownArrow,
    "⫤" => StaticToken::DoubleLeftTee,
    "⊨" => StaticToken::DoubleRightTee,
    "⇑" => StaticToken::DoubleUpArrow,
    "∥" => StaticToken::DoubleVerticalBar,
    "↓" => StaticToken::DownArrow,
    "⤓" => StaticToken::DownArrowBar,
    "⥐" => StaticToken::DownLeftRightVector,
    "⥞" => StaticToken::DownLeftTeeVector,
    "↽" => StaticToken::DownLeftVector,
    "⥖" => StaticToken::DownLeftVectorBar,
    "⥟" => StaticToken::DownRightTeeVector,
    "⇁" => StaticToken::DownRightVector,
    "⥗" => StaticToken::DownRightVectorBar,
    "⊤" => StaticToken::DownTee,
    "↧" => StaticToken::DownTeeArrow,
    "" => StaticToken::E,
    "∈" => StaticToken::Element,
    "==" => StaticToken::Equal,
    "" => StaticToken::Equal,
    "" => StaticToken::Equal,
    "≂" => StaticToken::EqualTilde,
    "⇌" => StaticToken::Equilibrium,
    "⧦" => StaticToken::Equivalent,
    "∃" => StaticToken::Exists,
    "⌊" => StaticToken::LeftFloor,
    "⌋" => StaticToken::RightFloor,
    "∀" => StaticToken::ForAll,
    "&" => StaticToken::Function,
    "<<" => StaticToken::Get,
    //"∇_" => StaticToken::Grad,
    ">" => StaticToken::Greater,
    ">=" => StaticToken::GreaterEqual,
    "≥" => StaticToken::GreaterEqual,
    "⋛" => StaticToken::GreaterEqualLess,
    "≧" => StaticToken::GreaterFullEqual,
    "≫" => StaticToken::GreaterGreater,
    "≷" => StaticToken::GreaterLess,
    "⩾" => StaticToken::GreaterSlantEqual,
    "≳" => StaticToken::GreaterTilde,
    "≎" => StaticToken::HumpDownHump,
    "≏" => StaticToken::HumpEqual,
    "" => StaticToken::I,
    "" => StaticToken::I,
    "" => StaticToken::Implies,
    "++" => StaticToken::Increment,
    "∞" => StaticToken::Infinity,
    "~" => StaticToken::Infix,
    "∫" => StaticToken::Integrate,
    "" => StaticToken::IntegralMeasure,
    "⋂" => StaticToken::Intersection,
    //"∇^2_" => StaticToken::Laplacian,
    "⥡" => StaticToken::LeftDownTeeVector,
    "⇃" => StaticToken::LeftDownVector,
    "⥙" => StaticToken::LeftDownVectorBar,
    "⥎" => StaticToken::LeftRightVector,
    "[" => StaticToken::LeftSquareBracket,
    "]" => StaticToken::RightSquareBracket,
    "⊣" => StaticToken::LeftTee,
    "⥚" => StaticToken::LeftTeeVector,
    "⊲" => StaticToken::LeftTriangle,
    "⧏" => StaticToken::LeftTriangleBar,
    "⊴" => StaticToken::LeftTriangleEqual,
    "⥑" => StaticToken::LeftUpDownVector,
    "⥠" => StaticToken::LeftUpTeeVector,
    "↿" => StaticToken::LeftUpVector,
    "⥘" => StaticToken::LeftUpVectorBar,
    "↼" => StaticToken::LeftVector,
    "⥒" => StaticToken::LeftVectorBar,
    "<" => StaticToken::Less,
    "<=" => StaticToken::LessEqual,
    "≤" => StaticToken::LessEqual,
    "⋚" => StaticToken::LessEqualGreater,
    "≦" => StaticToken::LessFullEqual,
    "≶" => StaticToken::LessGreater,
    "≪" => StaticToken::LessLess,
    "⩽" => StaticToken::LessSlantEqual,
    "≲" => StaticToken::LessTilde,
    "" => StaticToken::Limit,
    "{" => StaticToken::LeftList,
    "}" => StaticToken::RightList,
    "/@" => StaticToken::Map,
    "//@" => StaticToken::MapAll,
    "" => StaticToken::MaxLimit,
    "::" => StaticToken::MessageName,
    "" => StaticToken::MinLimit,
    "∓" => StaticToken::MinusPlus,
    "⊼" => StaticToken::Nand,
    "⪢" => StaticToken::NestedGreaterGreater,
    "⪡" => StaticToken::NestedLessLess,
    "**" => StaticToken::NonCommutativeMultiply,
    "⊽" => StaticToken::Nor,
    "!" => StaticToken::Not,
    "¬" => StaticToken::Not,
    "≢" => StaticToken::NotCongruent,
    "≭" => StaticToken::NotCupCap,
    "∦" => StaticToken::NotDoubleVerticalBar,
    "∉" => StaticToken::NotElement,
    "∄" => StaticToken::NotExists,
    "≯" => StaticToken::NotGreater,
    "≱" => StaticToken::NotGreaterEqual,
    "≩" => StaticToken::NotGreaterFullEqual,
    "" => StaticToken::NotGreaterGreater,
    "≹" => StaticToken::NotGreaterLess,
    "" => StaticToken::NotGreaterSlantEqual,
    "≵" => StaticToken::NotGreaterTilde,
    "" => StaticToken::NotHumpDownHump,
    "" => StaticToken::NotHumpEqual,
    "⋪" => StaticToken::NotLeftTriangle,
    "" => StaticToken::NotLeftTriangleBar,
    "⋬" => StaticToken::NotLeftTriangleEqual,
    "≮" => StaticToken::NotLess,
    "≰" => StaticToken::NotLessEqual,
    "≨" => StaticToken::NotLessFullEqual,
    "≸" => StaticToken::NotLessGreater,
    "" => StaticToken::NotLessLess,
    "" => StaticToken::NotLessSlantEqual,
    "≴" => StaticToken::NotLessTilde,
    "" => StaticToken::NotNestedGreaterGreater,
    "" => StaticToken::NotNestedLessLess,
    "⊀" => StaticToken::NotPrecedes,
    "" => StaticToken::NotPrecedesEqual,
    "⋠" => StaticToken::NotPrecedesSlantEqual,
    "⋨" => StaticToken::NotPrecedesTilde,
    "∌" => StaticToken::NotReverseElement,
    "⋫" => StaticToken::NotRightTriangle,
    "" => StaticToken::NotRightTriangleBar,
    "⋭" => StaticToken::NotRightTriangleEqual,
    "" => StaticToken::NotSquareSubset,
    "⋢" => StaticToken::NotSquareSubsetEqual,
    "" => StaticToken::NotSquareSuperset,
    "⋣" => StaticToken::NotSquareSupersetEqual,
    "⊄" => StaticToken::NotSubset,
    "⊈" => StaticToken::NotSubsetEqual,
    "⊁" => StaticToken::NotSucceeds,
    "" => StaticToken::NotSucceedsEqual,
    "⋡" => StaticToken::NotSucceedsSlantEqual,
    "⋩" => StaticToken::NotSucceedsTilde,
    "⊅" => StaticToken::NotSuperset,
    "⊉" => StaticToken::NotSupersetEqual,
    "≁" => StaticToken::NotTilde,
    "≄" => StaticToken::NotTildeEqual,
    "≇" => StaticToken::NotTildeFullEqual,
    "≉" => StaticToken::NotTildeTilde,
    "" => StaticToken::NotVerticalBar,
    ":" => StaticToken::Optional,
    "||" => StaticToken::Or,
    "∨" => StaticToken::Or,
    "%" => StaticToken::Out,
    "[[" => StaticToken::LeftPart,
    "]]" => StaticToken::RightPart,
    // "" => StaticToken::LeftPart,
    // "" => StaticToken::RightPart,
    // ":" => StaticToken::Pattern,
    "?" => StaticToken::PatternTest,
    "π" => StaticToken::Pi,
    "" => StaticToken::Piecewise,
    "+" => StaticToken::Plus,
    "±" => StaticToken::PlusMinus,
    "//" => StaticToken::Postfix,
    "^" => StaticToken::Power,
    //"--" => StaticToken::PreDecrement,
    //"++" => StaticToken::PreIncrement,
    "≺" => StaticToken::Precedes,
    "⪯" => StaticToken::PrecedesEqual,
    "≼" => StaticToken::PrecedesSlantEqual,
    "≾" => StaticToken::PrecedesTilde,
    "@" => StaticToken::Prefix,
    //"∏_=^" => StaticToken::Product,
    "∷" => StaticToken::Proportion,
    "∝" => StaticToken::Proportional,
    ".." => StaticToken::Repeated,
    "..." => StaticToken::RepeatedNull,
    "/." => StaticToken::ReplaceAll,
    "//." => StaticToken::ReplaceRepeated,
    "∋" => StaticToken::ReverseElement,
    "⇋" => StaticToken::ReverseEquilibrium,
    "⥯" => StaticToken::ReverseUpEquilibrium,
    "⥝" => StaticToken::RightDownTeeVector,
    "⇂" => StaticToken::RightDownVector,
    "⥕" => StaticToken::RightDownVectorBar,
    "⊢" => StaticToken::RightTee,
    "⥛" => StaticToken::RightTeeVector,
    "⊳" => StaticToken::RightTriangle,
    "⧐" => StaticToken::RightTriangleBar,
    "⊵" => StaticToken::RightTriangleEqual,
    "⥏" => StaticToken::RightUpDownVector,
    "⥜" => StaticToken::RightUpTeeVector,
    "↾" => StaticToken::RightUpVector,
    "⥔" => StaticToken::RightUpVectorBar,
    "⇀" => StaticToken::RightVector,
    "⥓" => StaticToken::RightVectorBar,
    "=>" => StaticToken::Rule,
    "" => StaticToken::Rule,
    ":>" => StaticToken::RuleDelayed,
    "" => StaticToken::RuleDelayed,
    "===" => StaticToken::SameQ,
    "=" => StaticToken::Set,
    ":=" => StaticToken::SetDelayed,
    "#" => StaticToken::Slot,
    "##" => StaticToken::SlotSequence,
    "∘" => StaticToken::SmallCircle,
    ";;" => StaticToken::Span,
    "√" => StaticToken::Sqrt,
    "" => StaticToken::Square,
    "⊓" => StaticToken::SquareIntersection,
    "⊏" => StaticToken::SquareSubset,
    "⊑" => StaticToken::SquareSubsetEqual,
    "⊐" => StaticToken::SquareSuperset,
    "⊒" => StaticToken::SquareSupersetEqual,
    "⊔" => StaticToken::SquareUnion,
    "⋆" => StaticToken::Star,
    "~~" => StaticToken::StringExpression,
    "<>" => StaticToken::StringJoin,
    "⊂" => StaticToken::Subset,
    "⊆" => StaticToken::SubsetEqual,
    "-" => StaticToken::Subtract,
    "-=" => StaticToken::SubtractFrom,
    "≻" => StaticToken::Succeeds,
    "⪰" => StaticToken::SucceedsEqual,
    "≽" => StaticToken::SucceedsSlantEqual,
    "≿" => StaticToken::SucceedsTilde,
    "∍" => StaticToken::SuchThat,
    //"∑_=^" => StaticToken::Sum,
    "^†" => StaticToken::SuperDagger,
    "⊃" => StaticToken::Superset,
    "⊇" => StaticToken::SupersetEqual,
    "/:" => StaticToken::Tag,
    // "/:…=" => StaticToken::TagSet,
    // "/:…:=" => StaticToken::TagSetDelayed,
    // "/:…=." => StaticToken::TagUnset,
    "∴" => StaticToken::Therefore,
    "∼" => StaticToken::Tilde,
    "≃" => StaticToken::TildeEqual,
    "≅" => StaticToken::TildeFullEqual,
    "≈" => StaticToken::TildeTilde,
    "*" => StaticToken::Times,
    "×" => StaticToken::Times,
    "*=" => StaticToken::TimesBy,
    "" => StaticToken::Transpose,
    "" => StaticToken::TwoWayRule,
    "" => StaticToken::UndirectedEdge,
    "!=" => StaticToken::Unequal,
    "≠" => StaticToken::Unequal,
    "⋃" => StaticToken::Union,
    "⊎" => StaticToken::UnionPlus,
    "=!=" => StaticToken::UnsameQ,
    "=." => StaticToken::Unset,
    "↑" => StaticToken::UpArrow,
    "⤒" => StaticToken::UpArrowBar,
    "⥮" => StaticToken::UpEquilibrium,
    "⊥" => StaticToken::UpTee,
    "" => StaticToken::VectorGreater,
    "" => StaticToken::VectorGreaterEqual,
    "" => StaticToken::VectorLess,
    "" => StaticToken::VectorLessEqual,
    "⋁" => StaticToken::Vee,
    "" => StaticToken::VerticalBar,
    "" => StaticToken::VerticalSeparator,
    "≀" => StaticToken::VerticalTilde,
    "⋀" => StaticToken::Wedge,
    "" => StaticToken::Xnor,
    "⊻" => StaticToken::Xor,
};

lazy_static! {
    pub(crate) static ref TOKEN_PREC: HashMap<StaticToken, u32> = hashmap!{
        StaticToken::Product => PREC_PRODUCT,
        StaticToken::AddTo => PREC_ADD_TO,
        StaticToken::Alternatives => PREC_ALTERNATIVES,
        StaticToken::And => PREC_AND,
        StaticToken::LeftAngleBracket => PREC_LEFT_ANGLE_BRACKET,
        StaticToken::RightAngleBracket => PREC_RIGHT_ANGLE_BRACKET,
        StaticToken::Apply => PREC_APPLY,
        StaticToken::Apply1 => PREC_APPLY,
        StaticToken::LeftAssociation => PREC_LEFT_ASSOCIATION,
        StaticToken::RightAssociation => PREC_RIGHT_ASSOCIATION,
        StaticToken::Backslash => PREC_BACKSLASH,
        StaticToken::Because => PREC_BECAUSE,
        StaticToken::Blank => PREC_BLANK,
        StaticToken::BlankNullSequence => PREC_BLANK_NULL_SEQUENCE,
        StaticToken::BlankSequence => PREC_BLANK_SEQUENCE,
        StaticToken::LeftBracket => PREC_LEFT_BRACKET,
        StaticToken::RightBracket => PREC_RIGHT_BRACKET,
        StaticToken::Cap => PREC_CAP,
        StaticToken::LeftCeiling => PREC_LEFT_CEILING,
        StaticToken::RightCeiling => PREC_RIGHT_CEILING,
        StaticToken::CircleMinus => PREC_CIRCLE_MINUS,
        StaticToken::CirclePlus => PREC_CIRCLE_PLUS,
        StaticToken::CircleTimes => PREC_CIRCLE_TIMES,
        StaticToken::Colon => PREC_COLON,
        StaticToken::Comma => PREC_SEQUENCE,
        StaticToken::Composition => PREC_COMPOSITION,
        StaticToken::CompoundExpression => PREC_COMPOUND_EXPRESSION,
        StaticToken::Condition => PREC_CONDITION,
        StaticToken::Conjugate => PREC_CONJUGATE,
        StaticToken::ConjugateTranspose => PREC_CONJUGATE_TRANSPOSE,
        StaticToken::ConjugateTranspose => PREC_CONJUGATE_TRANSPOSE,
        StaticToken::Cross => PREC_CROSS,
        StaticToken::Cup => PREC_CUP,
        StaticToken::CupCap => PREC_CUP, // guess
        StaticToken::Decrement => PREC_DECREMENT,
        StaticToken::Del => PREC_DEL,
        StaticToken::Diamond => PREC_DIAMOND,
        StaticToken::DifferenceDelta => PREC_DIFFERENCE_DELTA,
        StaticToken::DiscreteRatio => PREC_DISCRETE_RATIO,
        StaticToken::DiscreteShift => PREC_DISCRETE_SHIFT,
        StaticToken::Divide => PREC_DIVIDE,
        StaticToken::Divide => PREC_DIVIDE,
        StaticToken::DivideBy => PREC_DIVIDE_BY,
        StaticToken::Dot => PREC_DOT,
        StaticToken::DotEqual => PREC_EQUAL, // guess
        StaticToken::DownTee => PREC_DOWN_TEE,
        StaticToken::E => PREC_SYMBOL,
        StaticToken::Element => PREC_ELEMENT,
        StaticToken::Equal => PREC_EQUAL,
        StaticToken::Equal => PREC_EQUAL,
        StaticToken::Equal => PREC_EQUAL,
        StaticToken::EqualTilde => PREC_EQUAL, // guess
        StaticToken::Equivalent => PREC_EQUIVALENT,
        StaticToken::Exists => PREC_EXISTS,
        StaticToken::LeftFloor => PREC_LEFT_FLOOR,
        StaticToken::RightFloor => PREC_RIGHT_FLOOR,
        StaticToken::ForAll => PREC_FOR_ALL,
        StaticToken::Function => PREC_FUNCTION,
        StaticToken::Get => PREC_GET,
        StaticToken::Greater => PREC_GREATER,
        StaticToken::GreaterEqual => PREC_GREATER_EQUAL,
        StaticToken::GreaterEqual => PREC_GREATER_EQUAL,
        StaticToken::GreaterEqualLess => PREC_GREATER_EQUAL, // guess
        StaticToken::GreaterFullEqual => PREC_GREATER_EQUAL, // guess
        StaticToken::GreaterGreater => PREC_GREATER, // guess
        StaticToken::GreaterLess => PREC_GREATER, // guess
        StaticToken::GreaterSlantEqual => PREC_GREATER,  // guess
        StaticToken::GreaterTilde => PREC_GREATER,  // guess
        StaticToken::I => PREC_SYMBOL,
        StaticToken::Implies => PREC_IMPLIES,
        StaticToken::Increment => PREC_INCREMENT,
        StaticToken::Infinity => PREC_SYMBOL,
        StaticToken::Integrate => PREC_INTEGRATE,
        StaticToken::Intersection => PREC_INTERSECTION,
        StaticToken::LeftSquareBracket => PREC_LEFT_SQUARE_BRACKET,
        StaticToken::RightSquareBracket => PREC_RIGHT_SQUARE_BRACKET,
        StaticToken::LeftTee => PREC_LEFT_TEE,
        StaticToken::Less => PREC_LESS,
        StaticToken::LessEqual => PREC_LESS_EQUAL,
        StaticToken::LessEqualGreater => PREC_LESS_EQUAL, // guess
        StaticToken::LessFullEqual => PREC_LESS_EQUAL, // guess
        StaticToken::LessGreater => PREC_LESS,  // guess
        StaticToken::LessLess => PREC_LESS, // guess
        StaticToken::LessSlantEqual => PREC_LESS_EQUAL, // guess
        StaticToken::LessTilde => PREC_LESS, // guess
        StaticToken::Limit => PREC_LIMIT,
        StaticToken::LeftList => PREC_LEFT_CURLY_BRACKET,
        StaticToken::RightList => PREC_RIGHT_CURLY_BRACKET,
        StaticToken::Map => PREC_MAP,
        StaticToken::MapAll => PREC_MAP_ALL,
        StaticToken::MaxLimit => PREC_MAX_LIMIT,
        StaticToken::MessageName => PREC_MESSAGE_NAME,
        StaticToken::MinLimit => PREC_MIN_LIMIT,
        StaticToken::MinusPlus => PREC_MINUS_PLUS,
        StaticToken::Nand => PREC_NAND,
        StaticToken::NestedGreaterGreater => PREC_GREATER, // guess
        StaticToken::NestedLessLess => PREC_LESS, // guess
        StaticToken::NonCommutativeMultiply => PREC_NON_COMMUTATIVE_MULTIPLY,
        StaticToken::Nor => PREC_NOR,
        StaticToken::Not => PREC_NOT,
        // the following precedences are uneducated guesses
        StaticToken::NotCupCap => PREC_CUP,
        StaticToken::NotDoubleVerticalBar => PREC_DOUBLE_VERTICAL_BAR,
        StaticToken::NotElement => PREC_ELEMENT,
        StaticToken::NotExists => PREC_EXISTS,
        StaticToken::NotGreater => PREC_GREATER,
        StaticToken::NotGreaterEqual => PREC_GREATER_EQUAL,
        StaticToken::NotGreaterFullEqual => PREC_GREATER_EQUAL,
        StaticToken::NotGreaterGreater => PREC_GREATER,
        StaticToken::NotGreaterLess => PREC_GREATER,
        StaticToken::NotGreaterSlantEqual => PREC_GREATER_EQUAL,
        StaticToken::NotGreaterTilde => PREC_GREATER_EQUAL,
        StaticToken::NotLess => PREC_LESS,
        StaticToken::NotLessEqual => PREC_LESS_EQUAL,
        StaticToken::NotLessFullEqual => PREC_LESS_EQUAL,
        StaticToken::NotLessGreater => PREC_LESS,
        StaticToken::NotLessLess => PREC_LESS,
        StaticToken::NotLessSlantEqual => PREC_LESS_EQUAL,
        StaticToken::NotLessTilde => PREC_LESS,
        StaticToken::NotNestedGreaterGreater => PREC_GREATER,
        StaticToken::NotNestedLessLess => PREC_LESS,
        StaticToken::Coproduct => PREC_COPRODUCT,
        StaticToken::NotSubset => PREC_SUBSET,
        StaticToken::NotSuperset => PREC_SUPERSET,
        StaticToken::NotVerticalBar => PREC_VERTICAL_BAR,
        // the previous precedences are uneducated guesses
        StaticToken::Optional => PREC_OPTIONAL,
        StaticToken::Or => PREC_OR,
        StaticToken::Or => PREC_OR,
        StaticToken::Out => PREC_OUT,
        StaticToken::Pattern => PREC_PATTERN,
        StaticToken::PatternTest => PREC_PATTERN_TEST,
        StaticToken::Piecewise => PREC_PIECEWISE,
        StaticToken::Plus => PREC_PLUS,
        StaticToken::PlusMinus => PREC_PLUS_MINUS,
        StaticToken::Postfix => PREC_POSTFIX,
        StaticToken::Power => PREC_POWER,
        StaticToken::Repeated => PREC_REPEATED,
        StaticToken::RepeatedNull => PREC_REPEATED_NULL,
        StaticToken::ReplaceAll => PREC_REPLACE_ALL,
        StaticToken::ReplaceRepeated => PREC_REPLACE_REPEATED,
        StaticToken::RightTee => PREC_RIGHT_TEE,
        StaticToken::Rule => PREC_RULE,
        StaticToken::Rule => PREC_RULE,
        StaticToken::RuleDelayed => PREC_RULE_DELAYED,
        StaticToken::RuleDelayed => PREC_RULE_DELAYED,
        StaticToken::SameQ => PREC_SAME_Q,
        StaticToken::Set => PREC_SET,
        StaticToken::SetDelayed => PREC_SET_DELAYED,
        StaticToken::Slot => PREC_SLOT,
        StaticToken::SlotSequence => PREC_SLOT_SEQUENCE,
        StaticToken::SmallCircle => PREC_SMALL_CIRCLE,
        StaticToken::Span => PREC_SPAN,
        StaticToken::Sqrt => PREC_SQRT,
        StaticToken::Square => PREC_SQUARE,
        StaticToken::Star => PREC_STAR,
        StaticToken::StringExpression => PREC_STRING_EXPRESSION,
        StaticToken::StringJoin => PREC_STRING_JOIN,
        StaticToken::D => PREC_D,
        StaticToken::Subset => PREC_SUBSET,
        StaticToken::SubtractFrom => PREC_SUBTRACT_FROM,
        StaticToken::SuchThat => PREC_SUCH_THAT,
        StaticToken::Superset => PREC_SUPERSET,
        StaticToken::TagSet => PREC_TAG_SET,
        StaticToken::TagSetDelayed => PREC_TAG_SET_DELAYED,
        StaticToken::TagUnset => PREC_TAG_UNSET,
        StaticToken::Therefore => PREC_THEREFORE,
        StaticToken::Times => PREC_TIMES,
        StaticToken::Times => PREC_TIMES,
        StaticToken::TimesBy => PREC_TIMES_BY,
        StaticToken::Transpose => PREC_TRANSPOSE,
        StaticToken::TwoWayRule => PREC_TWO_WAY_RULE,
        StaticToken::Unequal => PREC_UNEQUAL,
        StaticToken::Unequal => PREC_UNEQUAL,
        StaticToken::Union => PREC_UNION,
        StaticToken::UnsameQ => PREC_UNSAME_Q,
        StaticToken::Unset => PREC_UNSET,
        StaticToken::UpTee => PREC_UP_TEE,
        StaticToken::VerticalBar => PREC_VERTICAL_BAR,
        StaticToken::VerticalSeparator => PREC_VERTICAL_SEPARATOR,
        StaticToken::VerticalTilde => PREC_VERTICAL_TILDE,
        StaticToken::Wedge => PREC_WEDGE,
        StaticToken::Xnor => PREC_XNOR,
        StaticToken::Xor => PREC_XOR,
    };
}


lazy_static! {
    pub(crate) static ref UNKNOWN_TOKEN_PREC: HashSet<StaticToken> = hashset!{
        StaticToken::Tilde,
        StaticToken::SupersetEqual,
        StaticToken::Tag,
        StaticToken::TildeEqual,
        StaticToken::TildeFullEqual,
        StaticToken::TildeTilde,
        StaticToken::Succeeds,
        StaticToken::SucceedsEqual,
        StaticToken::SucceedsSlantEqual,
        StaticToken::SucceedsTilde,
        StaticToken::Sum,
        StaticToken::SuperDagger,
        StaticToken::UnionPlus,
        StaticToken::UndirectedEdge,
        StaticToken::UpArrow,
        StaticToken::UpArrowBar,
        StaticToken::UpEquilibrium,
        StaticToken::ContinuedFractionK,
        StaticToken::Conditioned,
        StaticToken::CenterDot,
        StaticToken::CircleDot,
//        StaticToken::CubeRoot,
        StaticToken::Infix,
        StaticToken::IntegralMeasure,
//        StaticToken::Laplacian,
        StaticToken::LeftDownTeeVector,
        StaticToken::LeftDownVector,
        StaticToken::NotPrecedes,
        StaticToken::NotPrecedesEqual,
        StaticToken::NotPrecedesSlantEqual,
        StaticToken::NotPrecedesTilde,
        StaticToken::NotReverseElement,
        StaticToken::NotSquareSubset,
        StaticToken::NotSquareSubsetEqual,
        StaticToken::NotSquareSuperset,
        StaticToken::NotSquareSupersetEqual,
        StaticToken::NotSubsetEqual,
        StaticToken::NotSucceeds,
        StaticToken::NotSucceedsEqual,
        StaticToken::NotSucceedsSlantEqual,
        StaticToken::NotSucceedsTilde,
        StaticToken::NotSupersetEqual,
        StaticToken::NotTilde,
        StaticToken::NotTildeEqual,
        StaticToken::NotTildeFullEqual,
        StaticToken::NotTildeTilde,
        StaticToken::LeftPart,
        StaticToken::RightPart,
        StaticToken::LeftPart,
        StaticToken::RightPart,
        StaticToken::Precedes,
        StaticToken::PrecedesEqual,
        StaticToken::PrecedesSlantEqual,
        StaticToken::PrecedesTilde,
        StaticToken::Prefix,
        StaticToken::Proportion,
        StaticToken::Proportional,
        StaticToken::ReverseElement,
        StaticToken::ReverseEquilibrium,
        StaticToken::ReverseUpEquilibrium,
        StaticToken::RightDownTeeVector,
        StaticToken::RightDownVector,
        StaticToken::RightDownVectorBar,
        StaticToken::RightTeeVector,
        StaticToken::RightUpDownVector,
        StaticToken::RightUpTeeVector,
        StaticToken::RightUpVector,
        StaticToken::RightUpVectorBar,
        StaticToken::RightVector,
        StaticToken::RightVectorBar,
        StaticToken::SquareIntersection,
        StaticToken::SquareSubset,
        StaticToken::SquareSubsetEqual,
        StaticToken::SquareSuperset,
        StaticToken::SquareSupersetEqual,
        StaticToken::SquareUnion,
        StaticToken::SubsetEqual,
        StaticToken::Subtract,
//        StaticToken::Curl,
        StaticToken::Degree,
        StaticToken::DirectedEdge,
        StaticToken::Distributed,
//        StaticToken::Div,
        StaticToken::LeftDoubleBracketingBar,
        StaticToken::RightDoubleBracketingBar,
//        StaticToken::BracketingBar,
        StaticToken::CapitalDifferentialD,
        StaticToken::DoubleDownArrow,
        StaticToken::DoubleLeftTee,
        StaticToken::DoubleRightTee,
        StaticToken::DoubleUpArrow,
        StaticToken::DoubleVerticalBar,
        StaticToken::DownArrow,
        StaticToken::DownArrowBar,
        StaticToken::DownLeftRightVector,
        StaticToken::DownLeftTeeVector,
        StaticToken::DownLeftVector,
        StaticToken::DownLeftVectorBar,
        StaticToken::DownRightTeeVector,
        StaticToken::DownRightVector,
        StaticToken::DownRightVectorBar,
        StaticToken::DownTeeArrow,
        StaticToken::Equilibrium,
//        StaticToken::Grad,
        StaticToken::HumpDownHump,
        StaticToken::HumpEqual,
        StaticToken::LeftDownVectorBar,
        StaticToken::LeftRightVector,
        StaticToken::LeftTeeVector,
        StaticToken::LeftTriangle,
        StaticToken::LeftTriangleBar,
        StaticToken::LeftTriangleEqual,
        StaticToken::LeftUpDownVector,
        StaticToken::LeftUpTeeVector,
        StaticToken::LeftUpVector,
        StaticToken::LeftUpVectorBar,
        StaticToken::LeftVector,
        StaticToken::LeftVectorBar,
        StaticToken::NotCongruent,
        StaticToken::NotRightTriangle,
        StaticToken::NotRightTriangleBar,
        StaticToken::NotRightTriangleEqual,
        StaticToken::RightTriangle,
        StaticToken::RightTriangleBar,
        StaticToken::RightTriangleEqual,
        StaticToken::NotHumpDownHump,
        StaticToken::NotHumpEqual,
        StaticToken::NotLeftTriangle,
        StaticToken::NotLeftTriangleBar,
        StaticToken::NotLeftTriangleEqual,
        StaticToken::Congruent,
        StaticToken::VectorGreater,
        StaticToken::VectorGreaterEqual,
        StaticToken::VectorLess,
        StaticToken::VectorLessEqual,
        StaticToken::Vee,
    };
}

// arity for "operators" that can appear in the call to the `null`  method
// of the Pratt parser, i.e. nullary, unary prefix, or brackets
lazy_static! {
    pub(crate) static ref NULL_ARITY: HashMap<StaticToken, Arity> = hashmap!{
        //nullary operators
        StaticToken::E => Arity::Nullary,
        StaticToken::I => Arity::Nullary,
        StaticToken::Pi => Arity::Nullary,
        StaticToken::Infinity => Arity::Nullary,
        StaticToken::Span => Arity::Nullary, // TODO: can be both unary and nullary

        // brackets
        StaticToken::LeftAngleBracket => Arity::Unary,
        StaticToken::LeftAssociation => Arity::Unary,
        StaticToken::LeftBracket => Arity::Unary,
        StaticToken::LeftCeiling => Arity::Unary,
        StaticToken::LeftFloor => Arity::Unary,
        StaticToken::LeftList => Arity::Unary,

        // unary (prefix) operators
        StaticToken::CapitalDifferentialD => Arity::Unary,
        StaticToken::Decrement => Arity::Unary,
        StaticToken::Increment => Arity::Unary,
        StaticToken::Del => Arity::Unary,
        StaticToken::Exists => Arity::Unary,
        StaticToken::ForAll => Arity::Unary,
        StaticToken::Get => Arity::Unary,
        StaticToken::MinusPlus => Arity::Unary,
        StaticToken::Not => Arity::Unary,
        StaticToken::NotExists => Arity::Unary,
        StaticToken::Plus => Arity::Unary,
        StaticToken::PlusMinus => Arity::Unary,
        StaticToken::Slot => Arity::Unary,
        StaticToken::SlotSequence => Arity::Unary,
        StaticToken::Sqrt => Arity::Unary,
        StaticToken::Square => Arity::Unary,
        StaticToken::Transpose => Arity::Unary,
    };
}

// arity for operators that can appear in the call to the `left`  method
// of the Pratt parser, i.e. unary postfix, binary, or function-like
lazy_static! {
    pub(crate) static ref LEFT_ARITY: HashMap<StaticToken, Arity> = hashmap!{
        StaticToken::LeftPart => Arity::Function,
        StaticToken::LeftSquareBracket => Arity::Function,

        StaticToken::Blank => Arity::Unary,
        StaticToken::BlankNullSequence => Arity::Unary,
        StaticToken::BlankSequence => Arity::Unary,
        StaticToken::Conjugate => Arity::Unary,
        StaticToken::ConjugateTranspose => Arity::Unary,
        StaticToken::Decrement => Arity::Unary,
        StaticToken::Degree => Arity::Unary,
        StaticToken::Function => Arity::Unary,
        StaticToken::Increment => Arity::Unary,
        StaticToken::Not => Arity::Unary,
        StaticToken::SuperDagger => Arity::Unary,

        StaticToken::Pattern => Arity::Binary,
        StaticToken::TagSet => Arity::Binary,
        StaticToken::TagSetDelayed => Arity::Binary,
        StaticToken::TagUnset => Arity::Binary,
        StaticToken::AddTo => Arity::Binary,
        StaticToken::Alternatives => Arity::Binary,
        StaticToken::And => Arity::Binary,
        StaticToken::Apply => Arity::Binary,
        StaticToken::Apply1 => Arity::Binary,
        StaticToken::Backslash => Arity::Binary,
        StaticToken::Because => Arity::Binary,
        StaticToken::Cap => Arity::Binary,
        StaticToken::CenterDot => Arity::Binary,
        StaticToken::CircleDot => Arity::Binary,
        StaticToken::CircleMinus => Arity::Binary,
        StaticToken::CirclePlus => Arity::Binary,
        StaticToken::CircleTimes => Arity::Binary,
        StaticToken::Colon => Arity::Binary,
        StaticToken::Comma => Arity::Binary,
        StaticToken::Composition => Arity::Binary,
        StaticToken::CompoundExpression => Arity::Binary,
        StaticToken::Condition => Arity::Binary,
        StaticToken::Conditioned => Arity::Binary,
        StaticToken::Congruent => Arity::Binary,
        StaticToken::Coproduct => Arity::Binary,
        StaticToken::Cross => Arity::Binary,
        StaticToken::Cup => Arity::Binary,
        StaticToken::CupCap => Arity::Binary,
        StaticToken::Diamond => Arity::Binary,
        StaticToken::DifferenceDelta => Arity::Binary,
        StaticToken::DirectedEdge => Arity::Binary,
        StaticToken::DiscreteRatio => Arity::Binary,
        StaticToken::DiscreteShift => Arity::Binary,
        StaticToken::Distributed => Arity::Binary,
        StaticToken::Divide => Arity::Binary,
        StaticToken::DivideBy => Arity::Binary,
        StaticToken::Dot => Arity::Binary,
        StaticToken::DotEqual => Arity::Binary,
        StaticToken::DoubleDownArrow => Arity::Binary,
        StaticToken::DoubleLeftTee => Arity::Binary,
        StaticToken::DoubleRightTee => Arity::Binary,
        StaticToken::DoubleUpArrow => Arity::Binary,
        StaticToken::DoubleVerticalBar => Arity::Binary,
        StaticToken::DownArrow => Arity::Binary,
        StaticToken::DownArrowBar => Arity::Binary,
        StaticToken::DownLeftRightVector => Arity::Binary,
        StaticToken::DownLeftTeeVector => Arity::Binary,
        StaticToken::DownLeftVector => Arity::Binary,
        StaticToken::DownLeftVectorBar => Arity::Binary,
        StaticToken::DownRightTeeVector => Arity::Binary,
        StaticToken::DownRightVector => Arity::Binary,
        StaticToken::DownRightVectorBar => Arity::Binary,
        StaticToken::DownTee => Arity::Binary,
        StaticToken::DownTeeArrow => Arity::Binary,
        StaticToken::Element => Arity::Binary,
        StaticToken::Equal => Arity::Binary,
        StaticToken::EqualTilde => Arity::Binary,
        StaticToken::Equilibrium => Arity::Binary,
        StaticToken::Equivalent => Arity::Binary,
        StaticToken::Greater => Arity::Binary,
        StaticToken::GreaterEqual => Arity::Binary,
        StaticToken::GreaterEqualLess => Arity::Binary,
        StaticToken::GreaterFullEqual => Arity::Binary,
        StaticToken::GreaterGreater => Arity::Binary,
        StaticToken::GreaterLess => Arity::Binary,
        StaticToken::GreaterSlantEqual => Arity::Binary,
        StaticToken::GreaterTilde => Arity::Binary,
        StaticToken::HumpDownHump => Arity::Binary,
        StaticToken::HumpEqual => Arity::Binary,
        StaticToken::Implies => Arity::Binary,
        StaticToken::Increment => Arity::Binary,
        StaticToken::Infix => Arity::Binary,
        StaticToken::Intersection => Arity::Binary,
        StaticToken::LeftDownTeeVector => Arity::Binary,
        StaticToken::LeftDownVector => Arity::Binary,
        StaticToken::LeftDownVectorBar => Arity::Binary,
        StaticToken::LeftRightVector => Arity::Binary,
        StaticToken::LeftTee => Arity::Binary,
        StaticToken::LeftTeeVector => Arity::Binary,
        StaticToken::LeftTriangle => Arity::Binary,
        StaticToken::LeftTriangleBar => Arity::Binary,
        StaticToken::LeftTriangleEqual => Arity::Binary,
        StaticToken::LeftUpDownVector => Arity::Binary,
        StaticToken::LeftUpTeeVector => Arity::Binary,
        StaticToken::LeftUpVector => Arity::Binary,
        StaticToken::LeftUpVectorBar => Arity::Binary,
        StaticToken::LeftVector => Arity::Binary,
        StaticToken::LeftVectorBar => Arity::Binary,
        StaticToken::Less => Arity::Binary,
        StaticToken::LessEqual => Arity::Binary,
        StaticToken::LessEqualGreater => Arity::Binary,
        StaticToken::LessFullEqual => Arity::Binary,
        StaticToken::LessGreater => Arity::Binary,
        StaticToken::LessLess => Arity::Binary,
        StaticToken::LessSlantEqual => Arity::Binary,
        StaticToken::LessTilde => Arity::Binary,
        StaticToken::Limit => Arity::Binary,
        StaticToken::LeftList => Arity::Binary,
        StaticToken::RightList => Arity::Binary,
        StaticToken::Map => Arity::Binary,
        StaticToken::MapAll => Arity::Binary,
        StaticToken::MaxLimit => Arity::Binary,
        StaticToken::MessageName => Arity::Binary,
        StaticToken::MinLimit => Arity::Binary,
        StaticToken::MinusPlus => Arity::Binary,
        StaticToken::Nand => Arity::Binary,
        StaticToken::NestedGreaterGreater => Arity::Binary,
        StaticToken::NestedLessLess => Arity::Binary,
        StaticToken::NonCommutativeMultiply => Arity::Binary,
        StaticToken::Nor => Arity::Binary,
        StaticToken::NotCongruent => Arity::Binary,
        StaticToken::NotCupCap => Arity::Binary,
        StaticToken::NotDoubleVerticalBar => Arity::Binary,
        StaticToken::NotElement => Arity::Binary,
        StaticToken::NotGreater => Arity::Binary,
        StaticToken::NotGreaterEqual => Arity::Binary,
        StaticToken::NotGreaterFullEqual => Arity::Binary,
        StaticToken::NotGreaterGreater => Arity::Binary,
        StaticToken::NotGreaterLess => Arity::Binary,
        StaticToken::NotGreaterSlantEqual => Arity::Binary,
        StaticToken::NotGreaterTilde => Arity::Binary,
        StaticToken::NotHumpDownHump => Arity::Binary,
        StaticToken::NotHumpEqual => Arity::Binary,
        StaticToken::NotLeftTriangle => Arity::Binary,
        StaticToken::NotLeftTriangleBar => Arity::Binary,
        StaticToken::NotLeftTriangleEqual => Arity::Binary,
        StaticToken::NotLess => Arity::Binary,
        StaticToken::NotLessEqual => Arity::Binary,
        StaticToken::NotLessFullEqual => Arity::Binary,
        StaticToken::NotLessGreater => Arity::Binary,
        StaticToken::NotLessLess => Arity::Binary,
        StaticToken::NotLessSlantEqual => Arity::Binary,
        StaticToken::NotLessTilde => Arity::Binary,
        StaticToken::NotNestedGreaterGreater => Arity::Binary,
        StaticToken::NotNestedLessLess => Arity::Binary,
        StaticToken::NotPrecedes => Arity::Binary,
        StaticToken::NotPrecedesEqual => Arity::Binary,
        StaticToken::NotPrecedesSlantEqual => Arity::Binary,
        StaticToken::NotPrecedesTilde => Arity::Binary,
        StaticToken::NotReverseElement => Arity::Binary,
        StaticToken::NotRightTriangle => Arity::Binary,
        StaticToken::NotRightTriangleBar => Arity::Binary,
        StaticToken::NotRightTriangleEqual => Arity::Binary,
        StaticToken::NotSquareSubset => Arity::Binary,
        StaticToken::NotSquareSubsetEqual => Arity::Binary,
        StaticToken::NotSquareSuperset => Arity::Binary,
        StaticToken::NotSquareSupersetEqual => Arity::Binary,
        StaticToken::NotSubset => Arity::Binary,
        StaticToken::NotSubsetEqual => Arity::Binary,
        StaticToken::NotSucceeds => Arity::Binary,
        StaticToken::NotSucceedsEqual => Arity::Binary,
        StaticToken::NotSucceedsSlantEqual => Arity::Binary,
        StaticToken::NotSucceedsTilde => Arity::Binary,
        StaticToken::NotSuperset => Arity::Binary,
        StaticToken::NotSupersetEqual => Arity::Binary,
        StaticToken::NotTilde => Arity::Binary,
        StaticToken::NotTildeEqual => Arity::Binary,
        StaticToken::NotTildeFullEqual => Arity::Binary,
        StaticToken::NotTildeTilde => Arity::Binary,
        StaticToken::NotVerticalBar => Arity::Binary,
        StaticToken::Optional => Arity::Binary,
        StaticToken::Or => Arity::Binary,
        StaticToken::PatternTest => Arity::Binary,
        StaticToken::Piecewise => Arity::Binary,
        StaticToken::Plus => Arity::Binary,
        StaticToken::PlusMinus => Arity::Binary,
        StaticToken::Postfix => Arity::Binary,
        StaticToken::Power => Arity::Binary,
        StaticToken::Precedes => Arity::Binary,
        StaticToken::PrecedesEqual => Arity::Binary,
        StaticToken::PrecedesSlantEqual => Arity::Binary,
        StaticToken::PrecedesTilde => Arity::Binary,
        StaticToken::Prefix => Arity::Binary,
        StaticToken::Proportion => Arity::Binary,
        StaticToken::Proportional => Arity::Binary,
        StaticToken::Repeated => Arity::Binary,
        StaticToken::RepeatedNull => Arity::Binary,
        StaticToken::ReplaceAll => Arity::Binary,
        StaticToken::ReplaceRepeated => Arity::Binary,
        StaticToken::ReverseElement => Arity::Binary,
        StaticToken::ReverseEquilibrium => Arity::Binary,
        StaticToken::ReverseUpEquilibrium => Arity::Binary,
        StaticToken::RightDownTeeVector => Arity::Binary,
        StaticToken::RightDownVector => Arity::Binary,
        StaticToken::RightDownVectorBar => Arity::Binary,
        StaticToken::RightTee => Arity::Binary,
        StaticToken::RightTeeVector => Arity::Binary,
        StaticToken::RightTriangle => Arity::Binary,
        StaticToken::RightTriangleBar => Arity::Binary,
        StaticToken::RightTriangleEqual => Arity::Binary,
        StaticToken::RightUpDownVector => Arity::Binary,
        StaticToken::RightUpTeeVector => Arity::Binary,
        StaticToken::RightUpVector => Arity::Binary,
        StaticToken::RightUpVectorBar => Arity::Binary,
        StaticToken::RightVector => Arity::Binary,
        StaticToken::RightVectorBar => Arity::Binary,
        StaticToken::Rule => Arity::Binary,
        StaticToken::RuleDelayed => Arity::Binary,
        StaticToken::SameQ => Arity::Binary,
        StaticToken::Set => Arity::Binary,
        StaticToken::SetDelayed => Arity::Binary,
        StaticToken::SmallCircle => Arity::Binary,
        StaticToken::Span => Arity::Binary, // can also be postfix
        StaticToken::SquareIntersection => Arity::Binary,
        StaticToken::SquareSubset => Arity::Binary,
        StaticToken::SquareSubsetEqual => Arity::Binary,
        StaticToken::SquareSuperset => Arity::Binary,
        StaticToken::SquareSupersetEqual => Arity::Binary,
        StaticToken::SquareUnion => Arity::Binary,
        StaticToken::Star => Arity::Binary,
        StaticToken::StringExpression => Arity::Binary,
        StaticToken::StringJoin => Arity::Binary,
        StaticToken::Subset => Arity::Binary,
        StaticToken::SubsetEqual => Arity::Binary,
        StaticToken::Subtract => Arity::Binary,
        StaticToken::SubtractFrom => Arity::Binary,
        StaticToken::Succeeds => Arity::Binary,
        StaticToken::SucceedsEqual => Arity::Binary,
        StaticToken::SucceedsSlantEqual => Arity::Binary,
        StaticToken::SucceedsTilde => Arity::Binary,
        StaticToken::SuchThat => Arity::Binary,
        StaticToken::Superset => Arity::Binary,
        StaticToken::SupersetEqual => Arity::Binary,
        // what is this?
        // StaticToken::Tag => Arity::Binary,
        StaticToken::Therefore => Arity::Binary,
        StaticToken::Tilde => Arity::Binary,
        StaticToken::TildeEqual => Arity::Binary,
        StaticToken::TildeFullEqual => Arity::Binary,
        StaticToken::TildeTilde => Arity::Binary,
        StaticToken::Times => Arity::Binary,
        StaticToken::TimesBy => Arity::Binary,
        StaticToken::TwoWayRule => Arity::Binary,
        StaticToken::UndirectedEdge => Arity::Binary,
        StaticToken::Unequal => Arity::Binary,
        StaticToken::Union => Arity::Binary,
        StaticToken::UnionPlus => Arity::Binary,
        StaticToken::UnsameQ => Arity::Binary,
        StaticToken::Unset => Arity::Binary,
        StaticToken::UpArrow => Arity::Binary,
        StaticToken::UpArrowBar => Arity::Binary,
        StaticToken::UpEquilibrium => Arity::Binary,
        StaticToken::UpTee => Arity::Binary,
        StaticToken::VectorGreater => Arity::Binary,
        StaticToken::VectorGreaterEqual => Arity::Binary,
        StaticToken::VectorLess => Arity::Binary,
        StaticToken::VectorLessEqual => Arity::Binary,
        StaticToken::Vee => Arity::Binary,
        StaticToken::VerticalBar => Arity::Binary,
        StaticToken::VerticalSeparator => Arity::Binary,
        StaticToken::VerticalTilde => Arity::Binary,
        StaticToken::Wedge => Arity::Binary,
        StaticToken::Xnor => Arity::Binary,
        StaticToken::Xor => Arity::Binary,
    };
}

lazy_static! {
    pub(crate) static ref CLOSING_BRACKET: HashMap<StaticToken, StaticToken> = hashmap!{
        StaticToken::LeftAngleBracket  => StaticToken::RightAngleBracket,
        StaticToken::LeftAssociation   => StaticToken::RightAssociation,
        StaticToken::LeftBracket       => StaticToken::RightBracket,
        StaticToken::LeftCeiling       => StaticToken::RightCeiling,
        StaticToken::LeftFloor         => StaticToken::RightFloor,
        StaticToken::LeftSquareBracket => StaticToken::RightSquareBracket,
        StaticToken::LeftPart          => StaticToken::RightPart,
        StaticToken::LeftList          => StaticToken::RightList,
        StaticToken::LeftTee           => StaticToken::RightTee,
    };
}

lazy_static! {
    pub(crate) static ref TOKEN_EXPRESSION: HashMap<StaticToken, Expression<'static>> = hashmap!{
        StaticToken::E => Expression::E,
        StaticToken::I => Expression::I,
        StaticToken::I => Expression::Pi,
        StaticToken::Infinity => Expression::Infinity,
    };
}
